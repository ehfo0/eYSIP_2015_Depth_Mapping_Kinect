
bin/Debug/demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000356  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000356  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  000003ea  2**0
                  ALLOC
  3 .stab         000009c0  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dff  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001bab  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_51>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a1 30       	cpi	r26, 0x01	; 1
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 a2 01 	call	0x344	; 0x344 <main>
 108:	0c 94 a9 01 	jmp	0x352	; 0x352 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <buzzer_pin_config>:
#include<util/delay.h>

unsigned char data; //to store received data from UDR1

void buzzer_pin_config (void)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 118:	87 e2       	ldi	r24, 0x27	; 39
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	27 e2       	ldi	r18, 0x27	; 39
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	28 60       	ori	r18, 0x08	; 8
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 12a:	88 e2       	ldi	r24, 0x28	; 40
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	28 e2       	ldi	r18, 0x28	; 40
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	f9 01       	movw	r30, r18
 134:	20 81       	ld	r18, Z
 136:	27 7f       	andi	r18, 0xF7	; 247
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <motion_pin_config>:

void motion_pin_config (void)
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
 14a:	81 e2       	ldi	r24, 0x21	; 33
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	21 e2       	ldi	r18, 0x21	; 33
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	f9 01       	movw	r30, r18
 154:	20 81       	ld	r18, Z
 156:	2f 60       	ori	r18, 0x0F	; 15
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
 PORTA = PORTA & 0xF0;
 15c:	82 e2       	ldi	r24, 0x22	; 34
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	22 e2       	ldi	r18, 0x22	; 34
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	f9 01       	movw	r30, r18
 166:	20 81       	ld	r18, Z
 168:	20 7f       	andi	r18, 0xF0	; 240
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 16e:	8a e0       	ldi	r24, 0x0A	; 10
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	2a e0       	ldi	r18, 0x0A	; 10
 174:	31 e0       	ldi	r19, 0x01	; 1
 176:	f9 01       	movw	r30, r18
 178:	20 81       	ld	r18, Z
 17a:	28 61       	ori	r18, 0x18	; 24
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 180:	8b e0       	ldi	r24, 0x0B	; 11
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	2b e0       	ldi	r18, 0x0B	; 11
 186:	31 e0       	ldi	r19, 0x01	; 1
 188:	f9 01       	movw	r30, r18
 18a:	20 81       	ld	r18, Z
 18c:	28 61       	ori	r18, 0x18	; 24
 18e:	fc 01       	movw	r30, r24
 190:	20 83       	st	Z, r18
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <port_init>:

//Function to initialize ports
void port_init()
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config();
 1a0:	0e 94 a1 00 	call	0x142	; 0x142 <motion_pin_config>
	buzzer_pin_config();
 1a4:	0e 94 88 00 	call	0x110	; 0x110 <buzzer_pin_config>
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <buzzer_on>:

void buzzer_on (void)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	1f 92       	push	r1
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
 1b8:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
 1ba:	86 e2       	ldi	r24, 0x26	; 38
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	88 60       	ori	r24, 0x08	; 8
 1c8:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
 1ca:	88 e2       	ldi	r24, 0x28	; 40
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	29 81       	ldd	r18, Y+1	; 0x01
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
}
 1d4:	0f 90       	pop	r0
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <buzzer_off>:

void buzzer_off (void)
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	1f 92       	push	r1
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
 1e6:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
 1e8:	86 e2       	ldi	r24, 0x26	; 38
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	87 7f       	andi	r24, 0xF7	; 247
 1f6:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
 1f8:	88 e2       	ldi	r24, 0x28	; 40
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	29 81       	ldd	r18, Y+1	; 0x01
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
}
 202:	0f 90       	pop	r0
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <uart2_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 UCSR2B = 0x00; //disable while setting baud rate
 212:	81 ed       	ldi	r24, 0xD1	; 209
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	fc 01       	movw	r30, r24
 218:	10 82       	st	Z, r1
 UCSR2A = 0x00;
 21a:	80 ed       	ldi	r24, 0xD0	; 208
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	10 82       	st	Z, r1
 UCSR2C = 0x06;
 222:	82 ed       	ldi	r24, 0xD2	; 210
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	26 e0       	ldi	r18, 0x06	; 6
 228:	fc 01       	movw	r30, r24
 22a:	20 83       	st	Z, r18
 UBRR2L = 0x5F; //set baud rate lo
 22c:	84 ed       	ldi	r24, 0xD4	; 212
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	2f e5       	ldi	r18, 0x5F	; 95
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
 UBRR2H = 0x00; //set baud rate hi
 236:	85 ed       	ldi	r24, 0xD5	; 213
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	fc 01       	movw	r30, r24
 23c:	10 82       	st	Z, r1
 UCSR2B = 0x98;
 23e:	81 ed       	ldi	r24, 0xD1	; 209
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	28 e9       	ldi	r18, 0x98	; 152
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <__vector_51>:


SIGNAL(USART2_RX_vect) 		// ISR for receive complete interrupt
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	00 90 5f 00 	lds	r0, 0x005F
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	00 90 5b 00 	lds	r0, 0x005B
 25e:	0f 92       	push	r0
 260:	2f 93       	push	r18
 262:	3f 93       	push	r19
 264:	4f 93       	push	r20
 266:	5f 93       	push	r21
 268:	6f 93       	push	r22
 26a:	7f 93       	push	r23
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	af 93       	push	r26
 272:	bf 93       	push	r27
 274:	ef 93       	push	r30
 276:	ff 93       	push	r31
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
	data = UDR2; 				//making copy of data from UDR2 in 'data' variable
 280:	86 ed       	ldi	r24, 0xD6	; 214
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	fc 01       	movw	r30, r24
 286:	80 81       	ld	r24, Z
 288:	80 93 00 02 	sts	0x0200, r24

	//UDR2 = data; 				//echo data back to PC

		if(data == 0x38) //ASCII value of 8
 28c:	80 91 00 02 	lds	r24, 0x0200
 290:	88 33       	cpi	r24, 0x38	; 56
 292:	29 f4       	brne	.+10     	; 0x29e <__vector_51+0x50>
		{
			PORTA=0x06;  //forward
 294:	82 e2       	ldi	r24, 0x22	; 34
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	26 e0       	ldi	r18, 0x06	; 6
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
		}

		if(data == 0x32) //ASCII value of 2
 29e:	80 91 00 02 	lds	r24, 0x0200
 2a2:	82 33       	cpi	r24, 0x32	; 50
 2a4:	29 f4       	brne	.+10     	; 0x2b0 <__vector_51+0x62>
		{
			PORTA=0x09; //back
 2a6:	82 e2       	ldi	r24, 0x22	; 34
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	29 e0       	ldi	r18, 0x09	; 9
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18
		}

		if(data == 0x34) //ASCII value of 4
 2b0:	80 91 00 02 	lds	r24, 0x0200
 2b4:	84 33       	cpi	r24, 0x34	; 52
 2b6:	29 f4       	brne	.+10     	; 0x2c2 <__vector_51+0x74>
		{
			PORTA=0x05;  //left
 2b8:	82 e2       	ldi	r24, 0x22	; 34
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	25 e0       	ldi	r18, 0x05	; 5
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
		}

		if(data == 0x36) //ASCII value of 6
 2c2:	80 91 00 02 	lds	r24, 0x0200
 2c6:	86 33       	cpi	r24, 0x36	; 54
 2c8:	29 f4       	brne	.+10     	; 0x2d4 <__vector_51+0x86>
		{
			PORTA=0x0A; //right
 2ca:	82 e2       	ldi	r24, 0x22	; 34
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	2a e0       	ldi	r18, 0x0A	; 10
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18
		}

		if(data == 0x35) //ASCII value of 5
 2d4:	80 91 00 02 	lds	r24, 0x0200
 2d8:	85 33       	cpi	r24, 0x35	; 53
 2da:	21 f4       	brne	.+8      	; 0x2e4 <__vector_51+0x96>
		{
			PORTA=0x00; //stop
 2dc:	82 e2       	ldi	r24, 0x22	; 34
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	fc 01       	movw	r30, r24
 2e2:	10 82       	st	Z, r1
		}

		if(data == 0x37) //ASCII value of 7
 2e4:	80 91 00 02 	lds	r24, 0x0200
 2e8:	87 33       	cpi	r24, 0x37	; 55
 2ea:	11 f4       	brne	.+4      	; 0x2f0 <__vector_51+0xa2>
		{
			buzzer_on();
 2ec:	0e 94 d7 00 	call	0x1ae	; 0x1ae <buzzer_on>
		}

		if(data == 0x39) //ASCII value of 9
 2f0:	80 91 00 02 	lds	r24, 0x0200
 2f4:	89 33       	cpi	r24, 0x39	; 57
 2f6:	11 f4       	brne	.+4      	; 0x2fc <__vector_51+0xae>
		{
			buzzer_off();
 2f8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <buzzer_off>
		}

}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	7f 91       	pop	r23
 30e:	6f 91       	pop	r22
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	00 92 5b 00 	sts	0x005B, r0
 31e:	0f 90       	pop	r0
 320:	00 92 5f 00 	sts	0x005F, r0
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
 332:	f8 94       	cli
 port_init();  //Initializes all the ports
 334:	0e 94 cc 00 	call	0x198	; 0x198 <port_init>
 uart2_init(); //Initailize UART1 for serial communiaction
 338:	0e 94 05 01 	call	0x20a	; 0x20a <uart2_init>
 sei();   //Enables the global interrupts
 33c:	78 94       	sei
}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <main>:

//Main Function
int main(void)
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
	init_devices();
 34c:	0e 94 95 01 	call	0x32a	; 0x32a <init_devices>
	while(1);
 350:	ff cf       	rjmp	.-2      	; 0x350 <main+0xc>

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
