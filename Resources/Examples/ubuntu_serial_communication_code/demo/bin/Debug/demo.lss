
bin/Debug/demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000011aa  0000123e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800206  00800206  00001244  2**0
                  ALLOC
  3 .stab         00001c5c  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011db  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000407b  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__ctors_end>
       4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
       8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
       c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      10:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      18:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      1c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      20:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      24:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      28:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      2c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      30:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      34:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      38:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      3c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      40:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      44:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      48:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      4c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      50:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      54:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      58:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      5c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      60:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      64:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      68:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      6c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      70:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      74:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      78:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      7c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      80:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      84:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      88:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      8c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      90:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      94:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      98:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      9c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      a0:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      a4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      a8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      ac:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      b0:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      b4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      b8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      bc:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      c0:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      c4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      c8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      cc:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_51>
      d0:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      d4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      d8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      dc:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      e0:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      e4:	c6 04       	cpc	r12, r6
      e6:	80 04       	cpc	r8, r0
      e8:	8d 04       	cpc	r8, r13
      ea:	90 04       	cpc	r9, r0
      ec:	93 04       	cpc	r9, r3
      ee:	f9 04       	cpc	r15, r9
      f0:	f9 04       	cpc	r15, r9
      f2:	f9 04       	cpc	r15, r9
      f4:	f9 04       	cpc	r15, r9
      f6:	f9 04       	cpc	r15, r9
      f8:	f9 04       	cpc	r15, r9
      fa:	f9 04       	cpc	r15, r9
      fc:	f9 04       	cpc	r15, r9
      fe:	f9 04       	cpc	r15, r9
     100:	f9 04       	cpc	r15, r9
     102:	f9 04       	cpc	r15, r9
     104:	96 04       	cpc	r9, r6
     106:	99 04       	cpc	r9, r9
     108:	9c 04       	cpc	r9, r12
     10a:	9f 04       	cpc	r9, r15
     10c:	a2 04       	cpc	r10, r2
     10e:	f9 04       	cpc	r15, r9
     110:	f9 04       	cpc	r15, r9
     112:	f9 04       	cpc	r15, r9
     114:	f9 04       	cpc	r15, r9
     116:	f9 04       	cpc	r15, r9
     118:	f9 04       	cpc	r15, r9
     11a:	f9 04       	cpc	r15, r9
     11c:	f9 04       	cpc	r15, r9
     11e:	f9 04       	cpc	r15, r9
     120:	f9 04       	cpc	r15, r9
     122:	f9 04       	cpc	r15, r9
     124:	ab 04       	cpc	r10, r11
     126:	ae 04       	cpc	r10, r14
     128:	b1 04       	cpc	r11, r1
     12a:	b4 04       	cpc	r11, r4
     12c:	cd 04       	cpc	r12, r13
     12e:	f9 04       	cpc	r15, r9
     130:	f9 04       	cpc	r15, r9
     132:	f9 04       	cpc	r15, r9
     134:	f9 04       	cpc	r15, r9
     136:	f9 04       	cpc	r15, r9
     138:	f9 04       	cpc	r15, r9
     13a:	f9 04       	cpc	r15, r9
     13c:	f9 04       	cpc	r15, r9
     13e:	f9 04       	cpc	r15, r9
     140:	f9 04       	cpc	r15, r9
     142:	f9 04       	cpc	r15, r9
     144:	b7 04       	cpc	r11, r7
     146:	ba 04       	cpc	r11, r10
     148:	bd 04       	cpc	r11, r13
     14a:	c6 04       	cpc	r12, r6
     14c:	cd 04       	cpc	r12, r13
     14e:	f1 04       	cpc	r15, r1
     150:	f9 04       	cpc	r15, r9
     152:	eb 04       	cpc	r14, r11
     154:	f9 04       	cpc	r15, r9
     156:	ee 04       	cpc	r14, r14
     158:	f9 04       	cpc	r15, r9
     15a:	f9 04       	cpc	r15, r9
     15c:	f9 04       	cpc	r15, r9
     15e:	f9 04       	cpc	r15, r9
     160:	f9 04       	cpc	r15, r9
     162:	f9 04       	cpc	r15, r9
     164:	d6 04       	cpc	r13, r6
     166:	d9 04       	cpc	r13, r9
     168:	dc 04       	cpc	r13, r12
     16a:	dc 04       	cpc	r13, r12
     16c:	e5 04       	cpc	r14, r5
     16e:	e8 04       	cpc	r14, r8
     170:	07 63       	ori	r16, 0x37	; 55
     172:	42 36       	cpi	r20, 0x62	; 98
     174:	b7 9b       	sbis	0x16, 7	; 22
     176:	d8 a7       	std	Y+40, r29	; 0x28
     178:	1a 39       	cpi	r17, 0x9A	; 154
     17a:	68 56       	subi	r22, 0x68	; 104
     17c:	18 ae       	std	Y+56, r1	; 0x38
     17e:	ba ab       	std	Y+50, r27	; 0x32
     180:	55 8c       	ldd	r5, Z+29	; 0x1d
     182:	1d 3c       	cpi	r17, 0xCD	; 205
     184:	b7 cc       	rjmp	.-1682   	; 0xfffffaf4 <__eeprom_end+0xff7efaf4>
     186:	57 63       	ori	r21, 0x37	; 55
     188:	bd 6d       	ori	r27, 0xDD	; 221
     18a:	ed fd       	.word	0xfded	; ????
     18c:	75 3e       	cpi	r23, 0xE5	; 229
     18e:	f6 17       	cp	r31, r22
     190:	72 31       	cpi	r23, 0x12	; 18
     192:	bf 00       	.word	0x00bf	; ????
     194:	00 00       	nop
     196:	80 3f       	cpi	r24, 0xF0	; 240
     198:	08 00       	.word	0x0008	; ????
     19a:	00 00       	nop
     19c:	be 92       	st	-X, r11
     19e:	24 49       	sbci	r18, 0x94	; 148
     1a0:	12 3e       	cpi	r17, 0xE2	; 226
     1a2:	ab aa       	std	Y+51, r10	; 0x33
     1a4:	aa 2a       	or	r10, r26
     1a6:	be cd       	rjmp	.-1156   	; 0xfffffd24 <__eeprom_end+0xff7efd24>
     1a8:	cc cc       	rjmp	.-1640   	; 0xfffffb42 <__eeprom_end+0xff7efb42>
     1aa:	4c 3e       	cpi	r20, 0xEC	; 236
     1ac:	00 00       	nop
     1ae:	00 80       	ld	r0, Z
     1b0:	be ab       	std	Y+54, r27	; 0x36
     1b2:	aa aa       	std	Y+50, r10	; 0x32
     1b4:	aa 3e       	cpi	r26, 0xEA	; 234
     1b6:	00 00       	nop
     1b8:	00 00       	nop
     1ba:	bf 00       	.word	0x00bf	; ????
     1bc:	00 00       	nop
     1be:	80 3f       	cpi	r24, 0xF0	; 240
     1c0:	00 00       	nop
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	41 78       	andi	r20, 0x81	; 129
     1c8:	d3 bb       	out	0x13, r29	; 19
     1ca:	43 87       	std	Z+11, r20	; 0x0b
     1cc:	d1 13       	cpse	r29, r17
     1ce:	3d 19       	sub	r19, r13
     1d0:	0e 3c       	cpi	r16, 0xCE	; 206
     1d2:	c3 bd       	out	0x23, r28	; 35
     1d4:	42 82       	std	Z+2, r4	; 0x02
     1d6:	ad 2b       	or	r26, r29
     1d8:	3e 68       	ori	r19, 0x8E	; 142
     1da:	ec 82       	std	Y+4, r14	; 0x04
     1dc:	76 be       	out	0x36, r7	; 54
     1de:	d9 8f       	std	Y+25, r29	; 0x19
     1e0:	e1 a9       	ldd	r30, Z+49	; 0x31
     1e2:	3e 4c       	sbci	r19, 0xCE	; 206
     1e4:	80 ef       	ldi	r24, 0xF0	; 240
     1e6:	ff be       	out	0x3f, r15	; 63
     1e8:	01 c4       	rjmp	.+2050   	; 0x9ec <__vector_51+0x2b8>
     1ea:	ff 7f       	andi	r31, 0xFF	; 255
     1ec:	3f 00       	.word	0x003f	; ????
     1ee:	00 00       	nop
	...

000001f2 <__trampolines_start>:
     1f2:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__vector_51+0x246>
     1f6:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__vector_51+0x1e6>
     1fa:	0c 94 b4 04 	jmp	0x968	; 0x968 <__vector_51+0x234>
     1fe:	0c 94 96 04 	jmp	0x92c	; 0x92c <__vector_51+0x1f8>
     202:	0c 94 ab 04 	jmp	0x956	; 0x956 <__vector_51+0x222>
     206:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__vector_51+0x296>
     20a:	0c 94 a2 04 	jmp	0x944	; 0x944 <__vector_51+0x210>
     20e:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__vector_51+0x266>
     212:	0c 94 80 04 	jmp	0x900	; 0x900 <__vector_51+0x1cc>
     216:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__vector_51+0x2be>
     21a:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__vector_51+0x23a>
     21e:	0c 94 93 04 	jmp	0x926	; 0x926 <__vector_51+0x1f2>
     222:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__vector_51+0x27e>
     226:	0c 94 ba 04 	jmp	0x974	; 0x974 <__vector_51+0x240>
     22a:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__vector_51+0x2a8>
     22e:	0c 94 99 04 	jmp	0x932	; 0x932 <__vector_51+0x1fe>
     232:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__vector_51+0x284>
     236:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__vector_51+0x228>
     23a:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__vector_51+0x258>
     23e:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__vector_51+0x29c>
     242:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__vector_51+0x2ae>
     246:	0c 94 9c 04 	jmp	0x938	; 0x938 <__vector_51+0x204>
     24a:	0c 94 90 04 	jmp	0x920	; 0x920 <__vector_51+0x1ec>
     24e:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__vector_51+0x20a>
     252:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__vector_51+0x2a2>
     256:	0c 94 b1 04 	jmp	0x962	; 0x962 <__vector_51+0x22e>
     25a:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_51+0x278>

0000025e <__ctors_end>:
     25e:	11 24       	eor	r1, r1
     260:	1f be       	out	0x3f, r1	; 63
     262:	cf ef       	ldi	r28, 0xFF	; 255
     264:	d1 e2       	ldi	r29, 0x21	; 33
     266:	de bf       	out	0x3e, r29	; 62
     268:	cd bf       	out	0x3d, r28	; 61
     26a:	00 e0       	ldi	r16, 0x00	; 0
     26c:	0c bf       	out	0x3c, r16	; 60

0000026e <__do_copy_data>:
     26e:	12 e0       	ldi	r17, 0x02	; 2
     270:	a0 e0       	ldi	r26, 0x00	; 0
     272:	b2 e0       	ldi	r27, 0x02	; 2
     274:	ea ea       	ldi	r30, 0xAA	; 170
     276:	f1 e1       	ldi	r31, 0x11	; 17
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	0b bf       	out	0x3b, r16	; 59
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x14>
     27e:	07 90       	elpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	a6 30       	cpi	r26, 0x06	; 6
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0x10>

00000288 <__do_clear_bss>:
     288:	22 e0       	ldi	r18, 0x02	; 2
     28a:	a6 e0       	ldi	r26, 0x06	; 6
     28c:	b2 e0       	ldi	r27, 0x02	; 2
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	a3 32       	cpi	r26, 0x23	; 35
     294:	b2 07       	cpc	r27, r18
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	0e 94 5e 05 	call	0xabc	; 0xabc <main>
     29c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <_exit>

000002a0 <__bad_interrupt>:
     2a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a4 <lcd_reset_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a4:	86 e6       	ldi	r24, 0x66	; 102
     2a6:	9e e0       	ldi	r25, 0x0E	; 14
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_reset_4bit+0x4>
     2ac:	00 00       	nop
/*****Function to Reset LCD*****/
void lcd_reset_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2ae:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     2b2:	80 e3       	ldi	r24, 0x30	; 48
     2b4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2b6:	42 9a       	sbi	0x08, 2	; 8
     2b8:	8f ef       	ldi	r24, 0xFF	; 255
     2ba:	9f e3       	ldi	r25, 0x3F	; 63
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_reset_4bit+0x18>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_reset_4bit+0x1e>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2c2:	42 98       	cbi	0x08, 2	; 8
     2c4:	86 e6       	ldi	r24, 0x66	; 102
     2c6:	9e e0       	ldi	r25, 0x0E	; 14
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <lcd_reset_4bit+0x24>
     2cc:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2ce:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2d0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     2d2:	80 e3       	ldi	r24, 0x30	; 48
     2d4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2d6:	42 9a       	sbi	0x08, 2	; 8
     2d8:	8f ef       	ldi	r24, 0xFF	; 255
     2da:	9f e3       	ldi	r25, 0x3F	; 63
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_reset_4bit+0x38>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_reset_4bit+0x3e>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2e2:	42 98       	cbi	0x08, 2	; 8
     2e4:	86 e6       	ldi	r24, 0x66	; 102
     2e6:	9e e0       	ldi	r25, 0x0E	; 14
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_reset_4bit+0x44>
     2ec:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2ee:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2f0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     2f2:	80 e3       	ldi	r24, 0x30	; 48
     2f4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2f6:	42 9a       	sbi	0x08, 2	; 8
     2f8:	8f ef       	ldi	r24, 0xFF	; 255
     2fa:	9f e3       	ldi	r25, 0x3F	; 63
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <lcd_reset_4bit+0x58>
     300:	00 c0       	rjmp	.+0      	; 0x302 <lcd_reset_4bit+0x5e>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     302:	42 98       	cbi	0x08, 2	; 8
     304:	86 e6       	ldi	r24, 0x66	; 102
     306:	9e e0       	ldi	r25, 0x0E	; 14
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	f1 f7       	brne	.-4      	; 0x308 <lcd_reset_4bit+0x64>
     30c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     30e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     310:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     312:	80 e2       	ldi	r24, 0x20	; 32
     314:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     316:	42 9a       	sbi	0x08, 2	; 8
     318:	8f ef       	ldi	r24, 0xFF	; 255
     31a:	9f e3       	ldi	r25, 0x3F	; 63
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	f1 f7       	brne	.-4      	; 0x31c <lcd_reset_4bit+0x78>
     320:	00 c0       	rjmp	.+0      	; 0x322 <lcd_reset_4bit+0x7e>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     322:	42 98       	cbi	0x08, 2	; 8
     324:	08 95       	ret

00000326 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     326:	98 b1       	in	r25, 0x08	; 8
     328:	9f 70       	andi	r25, 0x0F	; 15
     32a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     32c:	28 b1       	in	r18, 0x08	; 8
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     32e:	98 2f       	mov	r25, r24
     330:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     332:	92 2b       	or	r25, r18
     334:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     336:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     338:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     33a:	42 9a       	sbi	0x08, 2	; 8
     33c:	ef ef       	ldi	r30, 0xFF	; 255
     33e:	ff e3       	ldi	r31, 0x3F	; 63
     340:	31 97       	sbiw	r30, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <lcd_wr_command+0x1a>
     344:	00 c0       	rjmp	.+0      	; 0x346 <lcd_wr_command+0x20>
	_delay_ms(5);
	cbit(lcd_port,EN);
     346:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     348:	98 b1       	in	r25, 0x08	; 8
     34a:	9f 70       	andi	r25, 0x0F	; 15
     34c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     34e:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     350:	82 95       	swap	r24
     352:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     354:	89 2b       	or	r24, r25
     356:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     358:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     35a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     35c:	42 9a       	sbi	0x08, 2	; 8
     35e:	8f ef       	ldi	r24, 0xFF	; 255
     360:	9f e3       	ldi	r25, 0x3F	; 63
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <lcd_wr_command+0x3c>
     366:	00 c0       	rjmp	.+0      	; 0x368 <lcd_wr_command+0x42>
	_delay_ms(5);
	cbit(lcd_port,EN);
     368:	42 98       	cbi	0x08, 2	; 8
     36a:	08 95       	ret

0000036c <lcd_init>:
     36c:	86 e6       	ldi	r24, 0x66	; 102
     36e:	9e e0       	ldi	r25, 0x0E	; 14
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <lcd_init+0x4>
     374:	00 00       	nop
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     376:	88 e2       	ldi	r24, 0x28	; 40
     378:	0e 94 93 01 	call	0x326	; 0x326 <lcd_wr_command>
	lcd_wr_command(0x01);
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	0e 94 93 01 	call	0x326	; 0x326 <lcd_wr_command>
	lcd_wr_command(0x06);
     382:	86 e0       	ldi	r24, 0x06	; 6
     384:	0e 94 93 01 	call	0x326	; 0x326 <lcd_wr_command>
	lcd_wr_command(0x0E);
     388:	8e e0       	ldi	r24, 0x0E	; 14
     38a:	0e 94 93 01 	call	0x326	; 0x326 <lcd_wr_command>
	lcd_wr_command(0x80);
     38e:	80 e8       	ldi	r24, 0x80	; 128
     390:	0c 94 93 01 	jmp	0x326	; 0x326 <lcd_wr_command>

00000394 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     394:	98 b1       	in	r25, 0x08	; 8
     396:	9f 70       	andi	r25, 0x0F	; 15
     398:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     39a:	28 b1       	in	r18, 0x08	; 8
/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     39c:	98 2f       	mov	r25, r24
     39e:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     3a0:	92 2b       	or	r25, r18
     3a2:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     3a4:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     3a6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     3a8:	42 9a       	sbi	0x08, 2	; 8
     3aa:	ef ef       	ldi	r30, 0xFF	; 255
     3ac:	ff e3       	ldi	r31, 0x3F	; 63
     3ae:	31 97       	sbiw	r30, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <lcd_wr_char+0x1a>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <lcd_wr_char+0x20>
	_delay_ms(5);
	cbit(lcd_port,EN);
     3b4:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
     3b6:	82 95       	swap	r24
     3b8:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
     3ba:	98 b1       	in	r25, 0x08	; 8
     3bc:	9f 70       	andi	r25, 0x0F	; 15
     3be:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     3c0:	98 b1       	in	r25, 0x08	; 8
     3c2:	89 2b       	or	r24, r25
     3c4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     3c6:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     3c8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     3ca:	42 9a       	sbi	0x08, 2	; 8
     3cc:	8f ef       	ldi	r24, 0xFF	; 255
     3ce:	9f e3       	ldi	r25, 0x3F	; 63
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <lcd_wr_char+0x3c>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <lcd_wr_char+0x42>
	_delay_ms(5);
	cbit(lcd_port,EN);
     3d6:	42 98       	cbi	0x08, 2	; 8
     3d8:	08 95       	ret

000003da <lcd_home>:
}


void lcd_home()
{
	lcd_wr_command(0x80);
     3da:	80 e8       	ldi	r24, 0x80	; 128
     3dc:	0c 94 93 01 	jmp	0x326	; 0x326 <lcd_wr_command>

000003e0 <lcd_string>:
}


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	ec 01       	movw	r28, r24
	while(*str != '\0')
     3e6:	89 91       	ld	r24, Y+
     3e8:	88 23       	and	r24, r24
     3ea:	19 f0       	breq	.+6      	; 0x3f2 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
     3ec:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_wr_char>
     3f0:	fa cf       	rjmp	.-12     	; 0x3e6 <lcd_string+0x6>
		str++;
	}
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
     3f8:	98 2f       	mov	r25, r24
     3fa:	86 2f       	mov	r24, r22
	switch (row) {
     3fc:	92 30       	cpi	r25, 0x02	; 2
     3fe:	59 f0       	breq	.+22     	; 0x416 <lcd_cursor+0x1e>
     400:	1c f4       	brge	.+6      	; 0x408 <lcd_cursor+0x10>
     402:	91 30       	cpi	r25, 0x01	; 1
     404:	31 f0       	breq	.+12     	; 0x412 <lcd_cursor+0x1a>
     406:	08 95       	ret
     408:	93 30       	cpi	r25, 0x03	; 3
     40a:	39 f0       	breq	.+14     	; 0x41a <lcd_cursor+0x22>
     40c:	94 30       	cpi	r25, 0x04	; 4
     40e:	39 f0       	breq	.+14     	; 0x41e <lcd_cursor+0x26>
     410:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
     412:	81 58       	subi	r24, 0x81	; 129
     414:	05 c0       	rjmp	.+10     	; 0x420 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     416:	81 54       	subi	r24, 0x41	; 65
     418:	03 c0       	rjmp	.+6      	; 0x420 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     41a:	8d 56       	subi	r24, 0x6D	; 109
     41c:	01 c0       	rjmp	.+2      	; 0x420 <lcd_cursor+0x28>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     41e:	8d 52       	subi	r24, 0x2D	; 45
     420:	0c 94 93 01 	jmp	0x326	; 0x326 <lcd_wr_command>

00000424 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	8a 01       	movw	r16, r20
     42e:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     430:	88 23       	and	r24, r24
     432:	11 f0       	breq	.+4      	; 0x438 <lcd_print+0x14>
     434:	61 11       	cpse	r22, r1
     436:	03 c0       	rjmp	.+6      	; 0x43e <lcd_print+0x1a>
	{
		lcd_home();
     438:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_home>
     43c:	02 c0       	rjmp	.+4      	; 0x442 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     43e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     442:	c5 30       	cpi	r28, 0x05	; 5
     444:	d1 05       	cpc	r29, r1
     446:	79 f4       	brne	.+30     	; 0x466 <lcd_print+0x42>
	{
		million=value/10000+48;
     448:	c8 01       	movw	r24, r16
     44a:	60 e1       	ldi	r22, 0x10	; 16
     44c:	77 e2       	ldi	r23, 0x27	; 39
     44e:	0e 94 65 05 	call	0xaca	; 0xaca <__udivmodhi4>
     452:	60 5d       	subi	r22, 0xD0	; 208
     454:	7f 4f       	sbci	r23, 0xFF	; 255
     456:	70 93 0b 02 	sts	0x020B, r23
     45a:	60 93 0a 02 	sts	0x020A, r22
		lcd_wr_char(million);
     45e:	86 2f       	mov	r24, r22
     460:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_wr_char>
     464:	03 c0       	rjmp	.+6      	; 0x46c <lcd_print+0x48>
		flag=1;
	}
	if(digits==4 || flag==1)
     466:	c4 30       	cpi	r28, 0x04	; 4
     468:	d1 05       	cpc	r29, r1
     46a:	59 f5       	brne	.+86     	; 0x4c2 <lcd_print+0x9e>
	{
		temp = value/1000;
     46c:	c8 01       	movw	r24, r16
     46e:	68 ee       	ldi	r22, 0xE8	; 232
     470:	73 e0       	ldi	r23, 0x03	; 3
     472:	0e 94 65 05 	call	0xaca	; 0xaca <__udivmodhi4>
     476:	cb 01       	movw	r24, r22
     478:	70 93 0e 02 	sts	0x020E, r23
     47c:	60 93 0d 02 	sts	0x020D, r22
		thousand = temp%10 + 48;
     480:	6a e0       	ldi	r22, 0x0A	; 10
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	0e 94 65 05 	call	0xaca	; 0xaca <__udivmodhi4>
     488:	c0 96       	adiw	r24, 0x30	; 48
     48a:	90 93 22 02 	sts	0x0222, r25
     48e:	80 93 21 02 	sts	0x0221, r24
		lcd_wr_char(thousand);
     492:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_wr_char>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     496:	c8 01       	movw	r24, r16
     498:	64 e6       	ldi	r22, 0x64	; 100
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	0e 94 65 05 	call	0xaca	; 0xaca <__udivmodhi4>
     4a0:	cb 01       	movw	r24, r22
     4a2:	70 93 0e 02 	sts	0x020E, r23
     4a6:	60 93 0d 02 	sts	0x020D, r22
		hundred = temp%10 + 48;
     4aa:	6a e0       	ldi	r22, 0x0A	; 10
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	0e 94 65 05 	call	0xaca	; 0xaca <__udivmodhi4>
     4b2:	c0 96       	adiw	r24, 0x30	; 48
     4b4:	90 93 1d 02 	sts	0x021D, r25
     4b8:	80 93 1c 02 	sts	0x021C, r24
		lcd_wr_char(hundred);
     4bc:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_wr_char>
     4c0:	06 c0       	rjmp	.+12     	; 0x4ce <lcd_print+0xaa>
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     4c2:	c3 30       	cpi	r28, 0x03	; 3
     4c4:	d1 05       	cpc	r29, r1
     4c6:	39 f3       	breq	.-50     	; 0x496 <lcd_print+0x72>
		temp = value/100;
		hundred = temp%10 + 48;
		lcd_wr_char(hundred);
		flag=1;
	}
	if(digits==2 || flag==1)
     4c8:	c2 30       	cpi	r28, 0x02	; 2
     4ca:	d1 05       	cpc	r29, r1
     4cc:	51 f5       	brne	.+84     	; 0x522 <lcd_print+0xfe>
	{
		temp = value/10;
     4ce:	2a e0       	ldi	r18, 0x0A	; 10
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	c8 01       	movw	r24, r16
     4d4:	b9 01       	movw	r22, r18
     4d6:	0e 94 65 05 	call	0xaca	; 0xaca <__udivmodhi4>
     4da:	cb 01       	movw	r24, r22
     4dc:	70 93 0e 02 	sts	0x020E, r23
     4e0:	60 93 0d 02 	sts	0x020D, r22
		tens = temp%10 + 48;
     4e4:	b9 01       	movw	r22, r18
     4e6:	0e 94 65 05 	call	0xaca	; 0xaca <__udivmodhi4>
     4ea:	c0 96       	adiw	r24, 0x30	; 48
     4ec:	90 93 16 02 	sts	0x0216, r25
     4f0:	80 93 15 02 	sts	0x0215, r24
		lcd_wr_char(tens);
     4f4:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
     4f8:	c8 01       	movw	r24, r16
     4fa:	6a e0       	ldi	r22, 0x0A	; 10
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	0e 94 65 05 	call	0xaca	; 0xaca <__udivmodhi4>
     502:	c0 96       	adiw	r24, 0x30	; 48
     504:	90 93 20 02 	sts	0x0220, r25
     508:	80 93 1f 02 	sts	0x021F, r24
		lcd_wr_char(unit);
     50c:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_wr_char>
	}
	if(digits>5)
     510:	26 97       	sbiw	r28, 0x06	; 6
     512:	5c f0       	brlt	.+22     	; 0x52a <lcd_print+0x106>
	{
		lcd_wr_char('E');
     514:	85 e4       	ldi	r24, 0x45	; 69
	}
	
}
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
		unit = value%10 + 48;
		lcd_wr_char(unit);
	}
	if(digits>5)
	{
		lcd_wr_char('E');
     51e:	0c 94 ca 01 	jmp	0x394	; 0x394 <lcd_wr_char>
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
     522:	c1 30       	cpi	r28, 0x01	; 1
     524:	d1 05       	cpc	r29, r1
     526:	a1 f7       	brne	.-24     	; 0x510 <lcd_print+0xec>
     528:	e7 cf       	rjmp	.-50     	; 0x4f8 <lcd_print+0xd4>
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	08 95       	ret

00000534 <lcd_port_config>:
 * Example Call:	lcd_port_config ();
 *
 */
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //setting all the LCD pin's direction set as output
     534:	87 b1       	in	r24, 0x07	; 7
     536:	87 6f       	ori	r24, 0xF7	; 247
     538:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; //setting all the LCD pins are set to logic 0 except PORTC 7
     53a:	88 b1       	in	r24, 0x08	; 8
     53c:	80 78       	andi	r24, 0x80	; 128
     53e:	88 b9       	out	0x08, r24	; 8
     540:	08 95       	ret

00000542 <adc_pin_config>:
 *
 */

 void adc_pin_config (void)
{
 DDRF = 0x00; //set PORTF direction as input
     542:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00; //set PORTF pins floating
     544:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00; //set PORTK direction as input
     546:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00; //set PORTK pins floating
     54a:	10 92 08 01 	sts	0x0108, r1
     54e:	08 95       	ret

00000550 <buzzer_pin_config>:
}

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
     550:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     552:	43 98       	cbi	0x08, 3	; 8
     554:	08 95       	ret

00000556 <motion_pin_config>:
 * Logic:		Enables the DDRA register and setting pins of PORTA and enables the DDRL Register
 * Example Call:	motion_pin_config ()
 */
void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
     556:	81 b1       	in	r24, 0x01	; 1
     558:	8f 60       	ori	r24, 0x0F	; 15
     55a:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     55c:	82 b1       	in	r24, 0x02	; 2
     55e:	80 7f       	andi	r24, 0xF0	; 240
     560:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     562:	ea e0       	ldi	r30, 0x0A	; 10
     564:	f1 e0       	ldi	r31, 0x01	; 1
     566:	80 81       	ld	r24, Z
     568:	88 61       	ori	r24, 0x18	; 24
     56a:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     56c:	eb e0       	ldi	r30, 0x0B	; 11
     56e:	f1 e0       	ldi	r31, 0x01	; 1
     570:	80 81       	ld	r24, Z
     572:	88 61       	ori	r24, 0x18	; 24
     574:	80 83       	st	Z, r24
     576:	08 95       	ret

00000578 <timer5_init>:
 * Logic:		Commented below
 * Example Call:	timer5_init()
 */
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     578:	e1 e2       	ldi	r30, 0x21	; 33
     57a:	f1 e0       	ldi	r31, 0x01	; 1
     57c:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     57e:	8f ef       	ldi	r24, 0xFF	; 255
     580:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     58a:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     58e:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     592:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     596:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     59a:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     59e:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     5a2:	89 ea       	ldi	r24, 0xA9	; 169
     5a4:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     5a8:	8b e0       	ldi	r24, 0x0B	; 11
     5aa:	80 83       	st	Z, r24
     5ac:	08 95       	ret

000005ae <velocity>:
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     5ae:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     5b2:	60 93 2a 01 	sts	0x012A, r22
     5b6:	08 95       	ret

000005b8 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     5b8:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     5ba:	90 7f       	andi	r25, 0xF0	; 240
 */
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
     5bc:	8f 70       	andi	r24, 0x0F	; 15
 PortARestore = PORTA; 			// reading the PORTA's original status
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     5be:	89 2b       	or	r24, r25
 PORTA = PortARestore; 			// setting the command to the port
     5c0:	82 b9       	out	0x02, r24	; 2
     5c2:	08 95       	ret

000005c4 <spot_left>:
 * Logic:		sets pins of PORTA for forward movement
 * Example Call:	forward()
 */
 void spot_left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
     5c4:	85 e0       	ldi	r24, 0x05	; 5
     5c6:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <motion_set>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     5d0:	80 93 2a 01 	sts	0x012A, r24
     5d4:	08 95       	ret

000005d6 <spot_right>:
  velocity(255,255);
}

void spot_right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
     5d6:	8a e0       	ldi	r24, 0x0A	; 10
     5d8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <motion_set>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     5dc:	8f ef       	ldi	r24, 0xFF	; 255
     5de:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     5e2:	80 93 2a 01 	sts	0x012A, r24
     5e6:	08 95       	ret

000005e8 <forward>:
  velocity(255,255);
}

void forward (void) //both wheels forward
{
  motion_set(0x06);
     5e8:	86 e0       	ldi	r24, 0x06	; 6
     5ea:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <motion_set>

000005ee <stop>:
 * Logic:		sets pins of PORTA for to stop the robot
 * Example Call:	stop()
 */
void stop (void)
{
  motion_set(0x00);
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <motion_set>

000005f4 <left>:
 * Logic:		sets pins of PORTA for to turn the robot left and sets the velocity of the wheel
 * Example Call:	left()
 */
void left (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x04);
     5f4:	84 e0       	ldi	r24, 0x04	; 4
     5f6:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <motion_set>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     5fa:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
     5fe:	88 ec       	ldi	r24, 0xC8	; 200
     600:	80 93 2a 01 	sts	0x012A, r24
     604:	08 95       	ret

00000606 <left_back>:
 velocity(0,200);
}

void left_back (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <motion_set>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     60c:	88 ec       	ldi	r24, 0xC8	; 200
     60e:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     612:	10 92 2a 01 	sts	0x012A, r1
     616:	08 95       	ret

00000618 <right>:
 * Logic:		sets pins of PORTA for to turn the robot right and sets the velocity of the wheel
 * Example Call:	right()
 */
void right (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x02);
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <motion_set>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     61e:	88 ec       	ldi	r24, 0xC8	; 200
     620:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     624:	10 92 2a 01 	sts	0x012A, r1
     628:	08 95       	ret

0000062a <right_back>:
 velocity(200,0);
}

void right_back (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
     62a:	88 e0       	ldi	r24, 0x08	; 8
     62c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <motion_set>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     630:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
     634:	88 ec       	ldi	r24, 0xC8	; 200
     636:	80 93 2a 01 	sts	0x012A, r24
     63a:	08 95       	ret

0000063c <back>:
 velocity(0,200);
}

void back (void) //both wheels backward
{
	motion_set(0x09);
     63c:	89 e0       	ldi	r24, 0x09	; 9
     63e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <motion_set>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     648:	80 93 2a 01 	sts	0x012A, r24
     64c:	08 95       	ret

0000064e <port_init>:
 * Logic:		calls the pin config functions
 * Example Call:	port_init()
 */
void port_init()
{
	motion_pin_config();
     64e:	0e 94 ab 02 	call	0x556	; 0x556 <motion_pin_config>
	buzzer_pin_config();
     652:	0e 94 a8 02 	call	0x550	; 0x550 <buzzer_pin_config>
	lcd_port_config();//lcd pin configuration
     656:	0e 94 9a 02 	call	0x534	; 0x534 <lcd_port_config>
    adc_pin_config();
     65a:	0c 94 a1 02 	jmp	0x542	; 0x542 <adc_pin_config>

0000065e <adc_init>:
}

void adc_init()
{
	ADCSRA = 0x00;
     65e:	ea e7       	ldi	r30, 0x7A	; 122
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     664:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     668:	80 e2       	ldi	r24, 0x20	; 32
     66a:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     66e:	80 e8       	ldi	r24, 0x80	; 128
     670:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     672:	86 e8       	ldi	r24, 0x86	; 134
     674:	80 83       	st	Z, r24
     676:	08 95       	ret

00000678 <ADC_Conversion>:
}

unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
     678:	88 30       	cpi	r24, 0x08	; 8
     67a:	18 f0       	brcs	.+6      	; 0x682 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     67c:	98 e0       	ldi	r25, 0x08	; 8
     67e:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
     682:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
     684:	80 62       	ori	r24, 0x20	; 32
     686:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     68a:	80 91 7a 00 	lds	r24, 0x007A
     68e:	80 64       	ori	r24, 0x40	; 64
     690:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     694:	80 91 7a 00 	lds	r24, 0x007A
     698:	84 ff       	sbrs	r24, 4
     69a:	fc cf       	rjmp	.-8      	; 0x694 <ADC_Conversion+0x1c>
	a=ADCH;
     69c:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     6a0:	90 91 7a 00 	lds	r25, 0x007A
     6a4:	90 61       	ori	r25, 0x10	; 16
     6a6:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     6aa:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     6ae:	08 95       	ret

000006b0 <buzzer_on>:
 * Example Call:	buzzer_on()
 */
void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     6b0:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     6b2:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     6b4:	88 b9       	out	0x08, r24	; 8
     6b6:	08 95       	ret

000006b8 <buzzer_off>:
 * Example Call:	buzzer_off()
 */
void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     6b8:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     6ba:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     6bc:	88 b9       	out	0x08, r24	; 8
     6be:	08 95       	ret

000006c0 <Sharp_GP2D12_estimation>:

unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     6c0:	68 2f       	mov	r22, r24
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 18 06 	call	0xc30	; 0xc30 <__floatunsisf>
     6cc:	2f ee       	ldi	r18, 0xEF	; 239
     6ce:	39 ec       	ldi	r19, 0xC9	; 201
     6d0:	43 e9       	ldi	r20, 0x93	; 147
     6d2:	5f e3       	ldi	r21, 0x3F	; 63
     6d4:	0e 94 09 07 	call	0xe12	; 0xe12 <pow>
     6d8:	9b 01       	movw	r18, r22
     6da:	ac 01       	movw	r20, r24
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	80 e8       	ldi	r24, 0x80	; 128
     6e2:	9f e3       	ldi	r25, 0x3F	; 63
     6e4:	0e 94 7f 05 	call	0xafe	; 0xafe <__divsf3>
     6e8:	2a e9       	ldi	r18, 0x9A	; 154
     6ea:	39 ef       	ldi	r19, 0xF9	; 249
     6ec:	4e e2       	ldi	r20, 0x2E	; 46
     6ee:	55 e4       	ldi	r21, 0x45	; 69
     6f0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3>
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	40 e2       	ldi	r20, 0x20	; 32
     6fa:	51 e4       	ldi	r21, 0x41	; 65
     6fc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3>
     700:	0e 94 e7 05 	call	0xbce	; 0xbce <__fixsfsi>
     704:	cb 01       	movw	r24, r22
     706:	61 32       	cpi	r22, 0x21	; 33
     708:	23 e0       	ldi	r18, 0x03	; 3
     70a:	72 07       	cpc	r23, r18
     70c:	10 f0       	brcs	.+4      	; 0x712 <Sharp_GP2D12_estimation+0x52>
     70e:	80 e2       	ldi	r24, 0x20	; 32
     710:	93 e0       	ldi	r25, 0x03	; 3
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
}
     712:	08 95       	ret

00000714 <uart2_init>:
 * Logic:		No logic
 * Example Call:	uart2_init()
 */
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
     714:	e1 ed       	ldi	r30, 0xD1	; 209
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     71a:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
     71e:	86 e0       	ldi	r24, 0x06	; 6
     720:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
     724:	8f e5       	ldi	r24, 0x5F	; 95
     726:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
     72a:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
     72e:	88 e9       	ldi	r24, 0x98	; 152
     730:	80 83       	st	Z, r24
     732:	08 95       	ret

00000734 <__vector_51>:
 * Output: 		sets the velocity of the wheels
 * Logic:		It stores data from UDR2 in a variable and using switch cases it sets the desired velocity
 * Example Call:	No call as it is an interrupt
 */
SIGNAL(USART2_RX_vect) 		// ISR for receive complete interrupt
{
     734:	1f 92       	push	r1
     736:	0f 92       	push	r0
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	0f 92       	push	r0
     73c:	11 24       	eor	r1, r1
     73e:	0b b6       	in	r0, 0x3b	; 59
     740:	0f 92       	push	r0
     742:	2f 93       	push	r18
     744:	3f 93       	push	r19
     746:	4f 93       	push	r20
     748:	5f 93       	push	r21
     74a:	6f 93       	push	r22
     74c:	7f 93       	push	r23
     74e:	8f 93       	push	r24
     750:	9f 93       	push	r25
     752:	af 93       	push	r26
     754:	bf 93       	push	r27
     756:	ef 93       	push	r30
     758:	ff 93       	push	r31
	data = UDR2; 				//making copy of data from UDR2 in 'data' variable
     75a:	80 91 d6 00 	lds	r24, 0x00D6
     75e:	80 93 17 02 	sts	0x0217, r24
        p5 = ADC_Conversion(5);
     762:	85 e0       	ldi	r24, 0x05	; 5
     764:	0e 94 3c 03 	call	0x678	; 0x678 <ADC_Conversion>
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	90 93 10 02 	sts	0x0210, r25
     76e:	80 93 0f 02 	sts	0x020F, r24
		p7 = ADC_Conversion(7);
     772:	87 e0       	ldi	r24, 0x07	; 7
     774:	0e 94 3c 03 	call	0x678	; 0x678 <ADC_Conversion>
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	90 93 09 02 	sts	0x0209, r25
     77e:	80 93 08 02 	sts	0x0208, r24
        sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
     782:	8b e0       	ldi	r24, 0x0B	; 11
     784:	0e 94 3c 03 	call	0x678	; 0x678 <ADC_Conversion>
     788:	80 93 1e 02 	sts	0x021E, r24
		value_mid = Sharp_GP2D12_estimation(sharp);
     78c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Sharp_GP2D12_estimation>
     790:	90 93 07 02 	sts	0x0207, r25
     794:	80 93 06 02 	sts	0x0206, r24
		sharp = ADC_Conversion(10);
     798:	8a e0       	ldi	r24, 0x0A	; 10
     79a:	0e 94 3c 03 	call	0x678	; 0x678 <ADC_Conversion>
     79e:	80 93 1e 02 	sts	0x021E, r24
		value_left = Sharp_GP2D12_estimation(sharp);
     7a2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Sharp_GP2D12_estimation>
     7a6:	90 93 1b 02 	sts	0x021B, r25
     7aa:	80 93 1a 02 	sts	0x021A, r24
		sharp = ADC_Conversion(12);
     7ae:	8c e0       	ldi	r24, 0x0C	; 12
     7b0:	0e 94 3c 03 	call	0x678	; 0x678 <ADC_Conversion>
     7b4:	80 93 1e 02 	sts	0x021E, r24
		value_right = Sharp_GP2D12_estimation(sharp);
     7b8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Sharp_GP2D12_estimation>
     7bc:	90 93 19 02 	sts	0x0219, r25
     7c0:	80 93 18 02 	sts	0x0218, r24
		lcd_print(1,1,p5,3);
     7c4:	40 91 0f 02 	lds	r20, 0x020F
     7c8:	50 91 10 02 	lds	r21, 0x0210
     7cc:	23 e0       	ldi	r18, 0x03	; 3
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	0e 94 12 02 	call	0x424	; 0x424 <lcd_print>
		lcd_print(1,8,p7,3);
     7d8:	40 91 08 02 	lds	r20, 0x0208
     7dc:	50 91 09 02 	lds	r21, 0x0209
     7e0:	23 e0       	ldi	r18, 0x03	; 3
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	68 e0       	ldi	r22, 0x08	; 8
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	0e 94 12 02 	call	0x424	; 0x424 <lcd_print>
		lcd_print(2,1,value_left,3);
     7ec:	40 91 1a 02 	lds	r20, 0x021A
     7f0:	50 91 1b 02 	lds	r21, 0x021B
     7f4:	23 e0       	ldi	r18, 0x03	; 3
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	0e 94 12 02 	call	0x424	; 0x424 <lcd_print>
		lcd_print(2,5,value_mid,3);
     800:	40 91 06 02 	lds	r20, 0x0206
     804:	50 91 07 02 	lds	r21, 0x0207
     808:	23 e0       	ldi	r18, 0x03	; 3
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	65 e0       	ldi	r22, 0x05	; 5
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	0e 94 12 02 	call	0x424	; 0x424 <lcd_print>
		lcd_print(2,9,value_right,3);
     814:	40 91 18 02 	lds	r20, 0x0218
     818:	50 91 19 02 	lds	r21, 0x0219
     81c:	23 e0       	ldi	r18, 0x03	; 3
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	69 e0       	ldi	r22, 0x09	; 9
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	0e 94 12 02 	call	0x424	; 0x424 <lcd_print>
	if(((value_mid < 200) && (value_mid > 80)) || (p5 < 140) || (p7 < 140) || ((value_left < 200) && (value_left > 80)) || ((value_right < 200) && (value_right > 80)))
     828:	80 91 06 02 	lds	r24, 0x0206
     82c:	90 91 07 02 	lds	r25, 0x0207
     830:	81 55       	subi	r24, 0x51	; 81
     832:	91 09       	sbc	r25, r1
     834:	87 37       	cpi	r24, 0x77	; 119
     836:	91 05       	cpc	r25, r1
     838:	08 f1       	brcs	.+66     	; 0x87c <__vector_51+0x148>
     83a:	80 91 0f 02 	lds	r24, 0x020F
     83e:	90 91 10 02 	lds	r25, 0x0210
     842:	8c 38       	cpi	r24, 0x8C	; 140
     844:	91 05       	cpc	r25, r1
     846:	e4 f0       	brlt	.+56     	; 0x880 <__vector_51+0x14c>
     848:	80 91 08 02 	lds	r24, 0x0208
     84c:	90 91 09 02 	lds	r25, 0x0209
     850:	8c 38       	cpi	r24, 0x8C	; 140
     852:	91 05       	cpc	r25, r1
     854:	ac f0       	brlt	.+42     	; 0x880 <__vector_51+0x14c>
     856:	80 91 1a 02 	lds	r24, 0x021A
     85a:	90 91 1b 02 	lds	r25, 0x021B
     85e:	81 55       	subi	r24, 0x51	; 81
     860:	91 09       	sbc	r25, r1
     862:	87 37       	cpi	r24, 0x77	; 119
     864:	91 05       	cpc	r25, r1
     866:	60 f0       	brcs	.+24     	; 0x880 <__vector_51+0x14c>
     868:	80 91 18 02 	lds	r24, 0x0218
     86c:	90 91 19 02 	lds	r25, 0x0219
     870:	81 55       	subi	r24, 0x51	; 81
     872:	91 09       	sbc	r25, r1
     874:	87 37       	cpi	r24, 0x77	; 119
     876:	91 05       	cpc	r25, r1
     878:	18 f0       	brcs	.+6      	; 0x880 <__vector_51+0x14c>
     87a:	36 c0       	rjmp	.+108    	; 0x8e8 <__vector_51+0x1b4>
	{
        if((value_mid < 200) && (value_mid > 80))
            back();
     87c:	0e 94 1e 03 	call	0x63c	; 0x63c <back>
        if(p5 < 140)
     880:	80 91 0f 02 	lds	r24, 0x020F
     884:	90 91 10 02 	lds	r25, 0x0210
     888:	8c 38       	cpi	r24, 0x8C	; 140
     88a:	91 05       	cpc	r25, r1
     88c:	44 f4       	brge	.+16     	; 0x89e <__vector_51+0x16a>
        {
            back();
     88e:	0e 94 1e 03 	call	0x63c	; 0x63c <back>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     892:	86 e9       	ldi	r24, 0x96	; 150
     894:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	80 93 2a 01 	sts	0x012A, r24
        if(p5 < 140)
        {
            back();
            velocity(150,255);
        }
        if(p7 < 140)
     89e:	80 91 08 02 	lds	r24, 0x0208
     8a2:	90 91 09 02 	lds	r25, 0x0209
     8a6:	8c 38       	cpi	r24, 0x8C	; 140
     8a8:	91 05       	cpc	r25, r1
     8aa:	44 f4       	brge	.+16     	; 0x8bc <__vector_51+0x188>
        {
            back();
     8ac:	0e 94 1e 03 	call	0x63c	; 0x63c <back>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     8b0:	8f ef       	ldi	r24, 0xFF	; 255
     8b2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     8b6:	86 e9       	ldi	r24, 0x96	; 150
     8b8:	80 93 2a 01 	sts	0x012A, r24
        if(p7 < 140)
        {
            back();
            velocity(255,150);
        }
        if((value_left < 200) && (value_left > 80))
     8bc:	80 91 1a 02 	lds	r24, 0x021A
     8c0:	90 91 1b 02 	lds	r25, 0x021B
     8c4:	81 55       	subi	r24, 0x51	; 81
     8c6:	91 09       	sbc	r25, r1
     8c8:	87 37       	cpi	r24, 0x77	; 119
     8ca:	91 05       	cpc	r25, r1
     8cc:	10 f4       	brcc	.+4      	; 0x8d2 <__vector_51+0x19e>
        {
            right_back();
     8ce:	0e 94 15 03 	call	0x62a	; 0x62a <right_back>
        }
        if((value_right < 200) && (value_right > 80))
     8d2:	80 91 18 02 	lds	r24, 0x0218
     8d6:	90 91 19 02 	lds	r25, 0x0219
     8da:	81 55       	subi	r24, 0x51	; 81
     8dc:	91 09       	sbc	r25, r1
     8de:	87 37       	cpi	r24, 0x77	; 119
     8e0:	91 05       	cpc	r25, r1
     8e2:	10 f4       	brcc	.+4      	; 0x8e8 <__vector_51+0x1b4>
        {
            left_back();
     8e4:	0e 94 03 03 	call	0x606	; 0x606 <left_back>
        }
    }

	switch(data)
     8e8:	80 91 17 02 	lds	r24, 0x0217
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	86 34       	cpi	r24, 0x46	; 70
     8f0:	91 05       	cpc	r25, r1
     8f2:	08 f0       	brcs	.+2      	; 0x8f6 <__vector_51+0x1c2>
     8f4:	7e c0       	rjmp	.+252    	; 0x9f2 <__vector_51+0x2be>
     8f6:	fc 01       	movw	r30, r24
     8f8:	ee 58       	subi	r30, 0x8E	; 142
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__tablejump2__>
	{
        case 0x00: x = 255; y = 255; break;
        case 0x01: x = 200; y = 255; break;
     900:	88 ec       	ldi	r24, 0xC8	; 200
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	90 93 05 02 	sts	0x0205, r25
     908:	80 93 04 02 	sts	0x0204, r24
     90c:	8f ef       	ldi	r24, 0xFF	; 255
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	90 93 03 02 	sts	0x0203, r25
     914:	80 93 02 02 	sts	0x0202, r24
     918:	6c c0       	rjmp	.+216    	; 0x9f2 <__vector_51+0x2be>
        case 0x02: x = 150; y = 255; break;
     91a:	86 e9       	ldi	r24, 0x96	; 150
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	f2 cf       	rjmp	.-28     	; 0x904 <__vector_51+0x1d0>
        case 0x03: x = 100; y = 255; break;
     920:	84 e6       	ldi	r24, 0x64	; 100
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	ef cf       	rjmp	.-34     	; 0x904 <__vector_51+0x1d0>
        case 0x04: x = 50;  y = 255; break;
     926:	82 e3       	ldi	r24, 0x32	; 50
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	ec cf       	rjmp	.-40     	; 0x904 <__vector_51+0x1d0>
        case 0x10: x = 255; y = 200; break;
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0b c0       	rjmp	.+22     	; 0x948 <__vector_51+0x214>
        case 0x11: x = 200; y = 200; break;
     932:	88 ec       	ldi	r24, 0xC8	; 200
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	2c c0       	rjmp	.+88     	; 0x990 <__vector_51+0x25c>
        case 0x12: x = 150; y = 200; break;
     938:	86 e9       	ldi	r24, 0x96	; 150
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	05 c0       	rjmp	.+10     	; 0x948 <__vector_51+0x214>
        case 0x13: x = 100; y = 200; break;
     93e:	84 e6       	ldi	r24, 0x64	; 100
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	02 c0       	rjmp	.+4      	; 0x948 <__vector_51+0x214>
        case 0x14: x = 50;  y = 200; break;
     944:	82 e3       	ldi	r24, 0x32	; 50
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	90 93 05 02 	sts	0x0205, r25
     94c:	80 93 04 02 	sts	0x0204, r24
     950:	88 ec       	ldi	r24, 0xC8	; 200
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	dd cf       	rjmp	.-70     	; 0x910 <__vector_51+0x1dc>
        case 0x20: x = 255; y = 150; break;
     956:	8f ef       	ldi	r24, 0xFF	; 255
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	21 c0       	rjmp	.+66     	; 0x99e <__vector_51+0x26a>
        case 0x21: x = 200; y = 150; break;
     95c:	88 ec       	ldi	r24, 0xC8	; 200
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	1e c0       	rjmp	.+60     	; 0x99e <__vector_51+0x26a>
        case 0x22: x = 150; y = 150; break;
     962:	86 e9       	ldi	r24, 0x96	; 150
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	14 c0       	rjmp	.+40     	; 0x990 <__vector_51+0x25c>
        case 0x23: x = 100; y = 150; break;
     968:	84 e6       	ldi	r24, 0x64	; 100
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	18 c0       	rjmp	.+48     	; 0x99e <__vector_51+0x26a>
        case 0x24: x = 50;  y = 150; break;
        case 0x30: x = 255; y = 100; break;
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	05 c0       	rjmp	.+10     	; 0x97e <__vector_51+0x24a>
        case 0x31: x = 200; y = 100; break;
     974:	88 ec       	ldi	r24, 0xC8	; 200
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	02 c0       	rjmp	.+4      	; 0x97e <__vector_51+0x24a>
        case 0x32: x = 150; y = 100; break;
     97a:	86 e9       	ldi	r24, 0x96	; 150
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	90 93 05 02 	sts	0x0205, r25
     982:	80 93 04 02 	sts	0x0204, r24
     986:	84 e6       	ldi	r24, 0x64	; 100
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	c2 cf       	rjmp	.-124    	; 0x910 <__vector_51+0x1dc>
        case 0x33: x = 255; y = 255; break;
     98c:	8f ef       	ldi	r24, 0xFF	; 255
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	90 93 05 02 	sts	0x0205, r25
     994:	80 93 04 02 	sts	0x0204, r24
     998:	bb cf       	rjmp	.-138    	; 0x910 <__vector_51+0x1dc>
        case 0x34: x = 50;  y = 150; break;
     99a:	82 e3       	ldi	r24, 0x32	; 50
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	90 93 05 02 	sts	0x0205, r25
     9a2:	80 93 04 02 	sts	0x0204, r24
     9a6:	86 e9       	ldi	r24, 0x96	; 150
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	b2 cf       	rjmp	.-156    	; 0x910 <__vector_51+0x1dc>
        case 0x40: x = 255; y = 50;  break;
     9ac:	8f ef       	ldi	r24, 0xFF	; 255
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	05 c0       	rjmp	.+10     	; 0x9bc <__vector_51+0x288>
        case 0x41: x = 200; y = 50;  break;
     9b2:	88 ec       	ldi	r24, 0xC8	; 200
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <__vector_51+0x288>
        case 0x42: x = 150; y = 50;  break;
        case 0x43: x = 150; y = 50;  break;
     9b8:	86 e9       	ldi	r24, 0x96	; 150
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	90 93 05 02 	sts	0x0205, r25
     9c0:	80 93 04 02 	sts	0x0204, r24
     9c4:	82 e3       	ldi	r24, 0x32	; 50
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	a3 cf       	rjmp	.-186    	; 0x910 <__vector_51+0x1dc>
        case 0x44: right();          return;
     9ca:	0e 94 0c 03 	call	0x618	; 0x618 <right>
     9ce:	58 c0       	rjmp	.+176    	; 0xa80 <__vector_51+0x34c>
        case 0x45: left();           return;
     9d0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <left>
     9d4:	55 c0       	rjmp	.+170    	; 0xa80 <__vector_51+0x34c>
        case 0x37: buzzer_on();      return;
     9d6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <buzzer_on>
     9da:	52 c0       	rjmp	.+164    	; 0xa80 <__vector_51+0x34c>
        case 0x39: buzzer_off();     return;
     9dc:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <buzzer_off>
     9e0:	4f c0       	rjmp	.+158    	; 0xa80 <__vector_51+0x34c>
        case 0x35: x = 0;   y = 0;   break;
     9e2:	10 92 05 02 	sts	0x0205, r1
     9e6:	10 92 04 02 	sts	0x0204, r1
     9ea:	10 92 03 02 	sts	0x0203, r1
     9ee:	10 92 02 02 	sts	0x0202, r1
	}
    if(((value_mid < 200) && (value_mid > 80)) || (p5 < 150) || (p7 < 140) || ((value_left < 200) && (value_left > 80)) || ((value_right < 200) && (value_right > 80)));
     9f2:	80 91 06 02 	lds	r24, 0x0206
     9f6:	90 91 07 02 	lds	r25, 0x0207
     9fa:	81 55       	subi	r24, 0x51	; 81
     9fc:	91 09       	sbc	r25, r1
     9fe:	87 37       	cpi	r24, 0x77	; 119
     a00:	91 05       	cpc	r25, r1
     a02:	f0 f1       	brcs	.+124    	; 0xa80 <__vector_51+0x34c>
     a04:	80 91 0f 02 	lds	r24, 0x020F
     a08:	90 91 10 02 	lds	r25, 0x0210
     a0c:	86 39       	cpi	r24, 0x96	; 150
     a0e:	91 05       	cpc	r25, r1
     a10:	bc f1       	brlt	.+110    	; 0xa80 <__vector_51+0x34c>
     a12:	80 91 08 02 	lds	r24, 0x0208
     a16:	90 91 09 02 	lds	r25, 0x0209
     a1a:	8c 38       	cpi	r24, 0x8C	; 140
     a1c:	91 05       	cpc	r25, r1
     a1e:	84 f1       	brlt	.+96     	; 0xa80 <__vector_51+0x34c>
     a20:	80 91 1a 02 	lds	r24, 0x021A
     a24:	90 91 1b 02 	lds	r25, 0x021B
     a28:	81 55       	subi	r24, 0x51	; 81
     a2a:	91 09       	sbc	r25, r1
     a2c:	87 37       	cpi	r24, 0x77	; 119
     a2e:	91 05       	cpc	r25, r1
     a30:	38 f1       	brcs	.+78     	; 0xa80 <__vector_51+0x34c>
     a32:	80 91 18 02 	lds	r24, 0x0218
     a36:	90 91 19 02 	lds	r25, 0x0219
     a3a:	81 55       	subi	r24, 0x51	; 81
     a3c:	91 09       	sbc	r25, r1
     a3e:	87 37       	cpi	r24, 0x77	; 119
     a40:	91 05       	cpc	r25, r1
     a42:	f0 f0       	brcs	.+60     	; 0xa80 <__vector_51+0x34c>
    else{
        forward();
     a44:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <forward>
        velocity(x,y);
     a48:	80 91 02 02 	lds	r24, 0x0202
     a4c:	90 91 04 02 	lds	r25, 0x0204
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a50:	90 93 28 01 	sts	0x0128, r25
	OCR5BL = (unsigned char)right_motor;
     a54:	80 93 2a 01 	sts	0x012A, r24
	}
    if(((value_mid < 200) && (value_mid > 80)) || (p5 < 150) || (p7 < 140) || ((value_left < 200) && (value_left > 80)) || ((value_right < 200) && (value_right > 80)));
    else{
        forward();
        velocity(x,y);
        lcd_print(1,1,x,3);
     a58:	40 91 04 02 	lds	r20, 0x0204
     a5c:	50 91 05 02 	lds	r21, 0x0205
     a60:	23 e0       	ldi	r18, 0x03	; 3
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	0e 94 12 02 	call	0x424	; 0x424 <lcd_print>
        lcd_print(2,1,y,3);
     a6c:	40 91 02 02 	lds	r20, 0x0202
     a70:	50 91 03 02 	lds	r21, 0x0203
     a74:	23 e0       	ldi	r18, 0x03	; 3
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	82 e0       	ldi	r24, 0x02	; 2
     a7c:	0e 94 12 02 	call	0x424	; 0x424 <lcd_print>
        }
}
     a80:	ff 91       	pop	r31
     a82:	ef 91       	pop	r30
     a84:	bf 91       	pop	r27
     a86:	af 91       	pop	r26
     a88:	9f 91       	pop	r25
     a8a:	8f 91       	pop	r24
     a8c:	7f 91       	pop	r23
     a8e:	6f 91       	pop	r22
     a90:	5f 91       	pop	r21
     a92:	4f 91       	pop	r20
     a94:	3f 91       	pop	r19
     a96:	2f 91       	pop	r18
     a98:	0f 90       	pop	r0
     a9a:	0b be       	out	0x3b, r0	; 59
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	0f 90       	pop	r0
     aa2:	1f 90       	pop	r1
     aa4:	18 95       	reti

00000aa6 <init_devices>:
 * Logic:		None
 * Example Call:	init_devices()
 */
void init_devices()
{
 cli(); //Clears the global interrupts
     aa6:	f8 94       	cli
 port_init();  //Initializes all the ports
     aa8:	0e 94 27 03 	call	0x64e	; 0x64e <port_init>
 uart2_init(); //Initailize UART1 for serial communiaction
     aac:	0e 94 8a 03 	call	0x714	; 0x714 <uart2_init>
 timer5_init();
     ab0:	0e 94 bc 02 	call	0x578	; 0x578 <timer5_init>
 adc_init();
     ab4:	0e 94 2f 03 	call	0x65e	; 0x65e <adc_init>
 sei();   //Enables the global interrupts
     ab8:	78 94       	sei
     aba:	08 95       	ret

00000abc <main>:
}

//Main Function
int main(void)
{
	init_devices();
     abc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <init_devices>
	lcd_reset_4bit();
     ac0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_reset_4bit>
    lcd_init();
     ac4:	0e 94 b6 01 	call	0x36c	; 0x36c <lcd_init>
     ac8:	ff cf       	rjmp	.-2      	; 0xac8 <main+0xc>

00000aca <__udivmodhi4>:
     aca:	aa 1b       	sub	r26, r26
     acc:	bb 1b       	sub	r27, r27
     ace:	51 e1       	ldi	r21, 0x11	; 17
     ad0:	07 c0       	rjmp	.+14     	; 0xae0 <__udivmodhi4_ep>

00000ad2 <__udivmodhi4_loop>:
     ad2:	aa 1f       	adc	r26, r26
     ad4:	bb 1f       	adc	r27, r27
     ad6:	a6 17       	cp	r26, r22
     ad8:	b7 07       	cpc	r27, r23
     ada:	10 f0       	brcs	.+4      	; 0xae0 <__udivmodhi4_ep>
     adc:	a6 1b       	sub	r26, r22
     ade:	b7 0b       	sbc	r27, r23

00000ae0 <__udivmodhi4_ep>:
     ae0:	88 1f       	adc	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	5a 95       	dec	r21
     ae6:	a9 f7       	brne	.-22     	; 0xad2 <__udivmodhi4_loop>
     ae8:	80 95       	com	r24
     aea:	90 95       	com	r25
     aec:	bc 01       	movw	r22, r24
     aee:	cd 01       	movw	r24, r26
     af0:	08 95       	ret

00000af2 <__tablejump2__>:
     af2:	ee 0f       	add	r30, r30
     af4:	ff 1f       	adc	r31, r31

00000af6 <__tablejump__>:
     af6:	05 90       	lpm	r0, Z+
     af8:	f4 91       	lpm	r31, Z
     afa:	e0 2d       	mov	r30, r0
     afc:	19 94       	eijmp

00000afe <__divsf3>:
     afe:	0c d0       	rcall	.+24     	; 0xb18 <__divsf3x>
     b00:	eb c0       	rjmp	.+470    	; 0xcd8 <__fp_round>
     b02:	e3 d0       	rcall	.+454    	; 0xcca <__fp_pscB>
     b04:	40 f0       	brcs	.+16     	; 0xb16 <__divsf3+0x18>
     b06:	da d0       	rcall	.+436    	; 0xcbc <__fp_pscA>
     b08:	30 f0       	brcs	.+12     	; 0xb16 <__divsf3+0x18>
     b0a:	21 f4       	brne	.+8      	; 0xb14 <__divsf3+0x16>
     b0c:	5f 3f       	cpi	r21, 0xFF	; 255
     b0e:	19 f0       	breq	.+6      	; 0xb16 <__divsf3+0x18>
     b10:	cc c0       	rjmp	.+408    	; 0xcaa <__fp_inf>
     b12:	51 11       	cpse	r21, r1
     b14:	15 c1       	rjmp	.+554    	; 0xd40 <__fp_szero>
     b16:	cf c0       	rjmp	.+414    	; 0xcb6 <__fp_nan>

00000b18 <__divsf3x>:
     b18:	f0 d0       	rcall	.+480    	; 0xcfa <__fp_split3>
     b1a:	98 f3       	brcs	.-26     	; 0xb02 <__divsf3+0x4>

00000b1c <__divsf3_pse>:
     b1c:	99 23       	and	r25, r25
     b1e:	c9 f3       	breq	.-14     	; 0xb12 <__divsf3+0x14>
     b20:	55 23       	and	r21, r21
     b22:	b1 f3       	breq	.-20     	; 0xb10 <__divsf3+0x12>
     b24:	95 1b       	sub	r25, r21
     b26:	55 0b       	sbc	r21, r21
     b28:	bb 27       	eor	r27, r27
     b2a:	aa 27       	eor	r26, r26
     b2c:	62 17       	cp	r22, r18
     b2e:	73 07       	cpc	r23, r19
     b30:	84 07       	cpc	r24, r20
     b32:	38 f0       	brcs	.+14     	; 0xb42 <__divsf3_pse+0x26>
     b34:	9f 5f       	subi	r25, 0xFF	; 255
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	22 0f       	add	r18, r18
     b3a:	33 1f       	adc	r19, r19
     b3c:	44 1f       	adc	r20, r20
     b3e:	aa 1f       	adc	r26, r26
     b40:	a9 f3       	breq	.-22     	; 0xb2c <__divsf3_pse+0x10>
     b42:	33 d0       	rcall	.+102    	; 0xbaa <__divsf3_pse+0x8e>
     b44:	0e 2e       	mov	r0, r30
     b46:	3a f0       	brmi	.+14     	; 0xb56 <__divsf3_pse+0x3a>
     b48:	e0 e8       	ldi	r30, 0x80	; 128
     b4a:	30 d0       	rcall	.+96     	; 0xbac <__divsf3_pse+0x90>
     b4c:	91 50       	subi	r25, 0x01	; 1
     b4e:	50 40       	sbci	r21, 0x00	; 0
     b50:	e6 95       	lsr	r30
     b52:	00 1c       	adc	r0, r0
     b54:	ca f7       	brpl	.-14     	; 0xb48 <__divsf3_pse+0x2c>
     b56:	29 d0       	rcall	.+82     	; 0xbaa <__divsf3_pse+0x8e>
     b58:	fe 2f       	mov	r31, r30
     b5a:	27 d0       	rcall	.+78     	; 0xbaa <__divsf3_pse+0x8e>
     b5c:	66 0f       	add	r22, r22
     b5e:	77 1f       	adc	r23, r23
     b60:	88 1f       	adc	r24, r24
     b62:	bb 1f       	adc	r27, r27
     b64:	26 17       	cp	r18, r22
     b66:	37 07       	cpc	r19, r23
     b68:	48 07       	cpc	r20, r24
     b6a:	ab 07       	cpc	r26, r27
     b6c:	b0 e8       	ldi	r27, 0x80	; 128
     b6e:	09 f0       	breq	.+2      	; 0xb72 <__divsf3_pse+0x56>
     b70:	bb 0b       	sbc	r27, r27
     b72:	80 2d       	mov	r24, r0
     b74:	bf 01       	movw	r22, r30
     b76:	ff 27       	eor	r31, r31
     b78:	93 58       	subi	r25, 0x83	; 131
     b7a:	5f 4f       	sbci	r21, 0xFF	; 255
     b7c:	2a f0       	brmi	.+10     	; 0xb88 <__divsf3_pse+0x6c>
     b7e:	9e 3f       	cpi	r25, 0xFE	; 254
     b80:	51 05       	cpc	r21, r1
     b82:	68 f0       	brcs	.+26     	; 0xb9e <__divsf3_pse+0x82>
     b84:	92 c0       	rjmp	.+292    	; 0xcaa <__fp_inf>
     b86:	dc c0       	rjmp	.+440    	; 0xd40 <__fp_szero>
     b88:	5f 3f       	cpi	r21, 0xFF	; 255
     b8a:	ec f3       	brlt	.-6      	; 0xb86 <__divsf3_pse+0x6a>
     b8c:	98 3e       	cpi	r25, 0xE8	; 232
     b8e:	dc f3       	brlt	.-10     	; 0xb86 <__divsf3_pse+0x6a>
     b90:	86 95       	lsr	r24
     b92:	77 95       	ror	r23
     b94:	67 95       	ror	r22
     b96:	b7 95       	ror	r27
     b98:	f7 95       	ror	r31
     b9a:	9f 5f       	subi	r25, 0xFF	; 255
     b9c:	c9 f7       	brne	.-14     	; 0xb90 <__divsf3_pse+0x74>
     b9e:	88 0f       	add	r24, r24
     ba0:	91 1d       	adc	r25, r1
     ba2:	96 95       	lsr	r25
     ba4:	87 95       	ror	r24
     ba6:	97 f9       	bld	r25, 7
     ba8:	08 95       	ret
     baa:	e1 e0       	ldi	r30, 0x01	; 1
     bac:	66 0f       	add	r22, r22
     bae:	77 1f       	adc	r23, r23
     bb0:	88 1f       	adc	r24, r24
     bb2:	bb 1f       	adc	r27, r27
     bb4:	62 17       	cp	r22, r18
     bb6:	73 07       	cpc	r23, r19
     bb8:	84 07       	cpc	r24, r20
     bba:	ba 07       	cpc	r27, r26
     bbc:	20 f0       	brcs	.+8      	; 0xbc6 <__divsf3_pse+0xaa>
     bbe:	62 1b       	sub	r22, r18
     bc0:	73 0b       	sbc	r23, r19
     bc2:	84 0b       	sbc	r24, r20
     bc4:	ba 0b       	sbc	r27, r26
     bc6:	ee 1f       	adc	r30, r30
     bc8:	88 f7       	brcc	.-30     	; 0xbac <__divsf3_pse+0x90>
     bca:	e0 95       	com	r30
     bcc:	08 95       	ret

00000bce <__fixsfsi>:
     bce:	04 d0       	rcall	.+8      	; 0xbd8 <__fixunssfsi>
     bd0:	68 94       	set
     bd2:	b1 11       	cpse	r27, r1
     bd4:	b5 c0       	rjmp	.+362    	; 0xd40 <__fp_szero>
     bd6:	08 95       	ret

00000bd8 <__fixunssfsi>:
     bd8:	98 d0       	rcall	.+304    	; 0xd0a <__fp_splitA>
     bda:	88 f0       	brcs	.+34     	; 0xbfe <__fixunssfsi+0x26>
     bdc:	9f 57       	subi	r25, 0x7F	; 127
     bde:	90 f0       	brcs	.+36     	; 0xc04 <__fixunssfsi+0x2c>
     be0:	b9 2f       	mov	r27, r25
     be2:	99 27       	eor	r25, r25
     be4:	b7 51       	subi	r27, 0x17	; 23
     be6:	a0 f0       	brcs	.+40     	; 0xc10 <__fixunssfsi+0x38>
     be8:	d1 f0       	breq	.+52     	; 0xc1e <__fixunssfsi+0x46>
     bea:	66 0f       	add	r22, r22
     bec:	77 1f       	adc	r23, r23
     bee:	88 1f       	adc	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	1a f0       	brmi	.+6      	; 0xbfa <__fixunssfsi+0x22>
     bf4:	ba 95       	dec	r27
     bf6:	c9 f7       	brne	.-14     	; 0xbea <__fixunssfsi+0x12>
     bf8:	12 c0       	rjmp	.+36     	; 0xc1e <__fixunssfsi+0x46>
     bfa:	b1 30       	cpi	r27, 0x01	; 1
     bfc:	81 f0       	breq	.+32     	; 0xc1e <__fixunssfsi+0x46>
     bfe:	9f d0       	rcall	.+318    	; 0xd3e <__fp_zero>
     c00:	b1 e0       	ldi	r27, 0x01	; 1
     c02:	08 95       	ret
     c04:	9c c0       	rjmp	.+312    	; 0xd3e <__fp_zero>
     c06:	67 2f       	mov	r22, r23
     c08:	78 2f       	mov	r23, r24
     c0a:	88 27       	eor	r24, r24
     c0c:	b8 5f       	subi	r27, 0xF8	; 248
     c0e:	39 f0       	breq	.+14     	; 0xc1e <__fixunssfsi+0x46>
     c10:	b9 3f       	cpi	r27, 0xF9	; 249
     c12:	cc f3       	brlt	.-14     	; 0xc06 <__fixunssfsi+0x2e>
     c14:	86 95       	lsr	r24
     c16:	77 95       	ror	r23
     c18:	67 95       	ror	r22
     c1a:	b3 95       	inc	r27
     c1c:	d9 f7       	brne	.-10     	; 0xc14 <__fixunssfsi+0x3c>
     c1e:	3e f4       	brtc	.+14     	; 0xc2e <__fixunssfsi+0x56>
     c20:	90 95       	com	r25
     c22:	80 95       	com	r24
     c24:	70 95       	com	r23
     c26:	61 95       	neg	r22
     c28:	7f 4f       	sbci	r23, 0xFF	; 255
     c2a:	8f 4f       	sbci	r24, 0xFF	; 255
     c2c:	9f 4f       	sbci	r25, 0xFF	; 255
     c2e:	08 95       	ret

00000c30 <__floatunsisf>:
     c30:	e8 94       	clt
     c32:	09 c0       	rjmp	.+18     	; 0xc46 <__floatsisf+0x12>

00000c34 <__floatsisf>:
     c34:	97 fb       	bst	r25, 7
     c36:	3e f4       	brtc	.+14     	; 0xc46 <__floatsisf+0x12>
     c38:	90 95       	com	r25
     c3a:	80 95       	com	r24
     c3c:	70 95       	com	r23
     c3e:	61 95       	neg	r22
     c40:	7f 4f       	sbci	r23, 0xFF	; 255
     c42:	8f 4f       	sbci	r24, 0xFF	; 255
     c44:	9f 4f       	sbci	r25, 0xFF	; 255
     c46:	99 23       	and	r25, r25
     c48:	a9 f0       	breq	.+42     	; 0xc74 <__floatsisf+0x40>
     c4a:	f9 2f       	mov	r31, r25
     c4c:	96 e9       	ldi	r25, 0x96	; 150
     c4e:	bb 27       	eor	r27, r27
     c50:	93 95       	inc	r25
     c52:	f6 95       	lsr	r31
     c54:	87 95       	ror	r24
     c56:	77 95       	ror	r23
     c58:	67 95       	ror	r22
     c5a:	b7 95       	ror	r27
     c5c:	f1 11       	cpse	r31, r1
     c5e:	f8 cf       	rjmp	.-16     	; 0xc50 <__floatsisf+0x1c>
     c60:	fa f4       	brpl	.+62     	; 0xca0 <__floatsisf+0x6c>
     c62:	bb 0f       	add	r27, r27
     c64:	11 f4       	brne	.+4      	; 0xc6a <__floatsisf+0x36>
     c66:	60 ff       	sbrs	r22, 0
     c68:	1b c0       	rjmp	.+54     	; 0xca0 <__floatsisf+0x6c>
     c6a:	6f 5f       	subi	r22, 0xFF	; 255
     c6c:	7f 4f       	sbci	r23, 0xFF	; 255
     c6e:	8f 4f       	sbci	r24, 0xFF	; 255
     c70:	9f 4f       	sbci	r25, 0xFF	; 255
     c72:	16 c0       	rjmp	.+44     	; 0xca0 <__floatsisf+0x6c>
     c74:	88 23       	and	r24, r24
     c76:	11 f0       	breq	.+4      	; 0xc7c <__floatsisf+0x48>
     c78:	96 e9       	ldi	r25, 0x96	; 150
     c7a:	11 c0       	rjmp	.+34     	; 0xc9e <__floatsisf+0x6a>
     c7c:	77 23       	and	r23, r23
     c7e:	21 f0       	breq	.+8      	; 0xc88 <__floatsisf+0x54>
     c80:	9e e8       	ldi	r25, 0x8E	; 142
     c82:	87 2f       	mov	r24, r23
     c84:	76 2f       	mov	r23, r22
     c86:	05 c0       	rjmp	.+10     	; 0xc92 <__floatsisf+0x5e>
     c88:	66 23       	and	r22, r22
     c8a:	71 f0       	breq	.+28     	; 0xca8 <__floatsisf+0x74>
     c8c:	96 e8       	ldi	r25, 0x86	; 134
     c8e:	86 2f       	mov	r24, r22
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	2a f0       	brmi	.+10     	; 0xca0 <__floatsisf+0x6c>
     c96:	9a 95       	dec	r25
     c98:	66 0f       	add	r22, r22
     c9a:	77 1f       	adc	r23, r23
     c9c:	88 1f       	adc	r24, r24
     c9e:	da f7       	brpl	.-10     	; 0xc96 <__floatsisf+0x62>
     ca0:	88 0f       	add	r24, r24
     ca2:	96 95       	lsr	r25
     ca4:	87 95       	ror	r24
     ca6:	97 f9       	bld	r25, 7
     ca8:	08 95       	ret

00000caa <__fp_inf>:
     caa:	97 f9       	bld	r25, 7
     cac:	9f 67       	ori	r25, 0x7F	; 127
     cae:	80 e8       	ldi	r24, 0x80	; 128
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	08 95       	ret

00000cb6 <__fp_nan>:
     cb6:	9f ef       	ldi	r25, 0xFF	; 255
     cb8:	80 ec       	ldi	r24, 0xC0	; 192
     cba:	08 95       	ret

00000cbc <__fp_pscA>:
     cbc:	00 24       	eor	r0, r0
     cbe:	0a 94       	dec	r0
     cc0:	16 16       	cp	r1, r22
     cc2:	17 06       	cpc	r1, r23
     cc4:	18 06       	cpc	r1, r24
     cc6:	09 06       	cpc	r0, r25
     cc8:	08 95       	ret

00000cca <__fp_pscB>:
     cca:	00 24       	eor	r0, r0
     ccc:	0a 94       	dec	r0
     cce:	12 16       	cp	r1, r18
     cd0:	13 06       	cpc	r1, r19
     cd2:	14 06       	cpc	r1, r20
     cd4:	05 06       	cpc	r0, r21
     cd6:	08 95       	ret

00000cd8 <__fp_round>:
     cd8:	09 2e       	mov	r0, r25
     cda:	03 94       	inc	r0
     cdc:	00 0c       	add	r0, r0
     cde:	11 f4       	brne	.+4      	; 0xce4 <__fp_round+0xc>
     ce0:	88 23       	and	r24, r24
     ce2:	52 f0       	brmi	.+20     	; 0xcf8 <__fp_round+0x20>
     ce4:	bb 0f       	add	r27, r27
     ce6:	40 f4       	brcc	.+16     	; 0xcf8 <__fp_round+0x20>
     ce8:	bf 2b       	or	r27, r31
     cea:	11 f4       	brne	.+4      	; 0xcf0 <__fp_round+0x18>
     cec:	60 ff       	sbrs	r22, 0
     cee:	04 c0       	rjmp	.+8      	; 0xcf8 <__fp_round+0x20>
     cf0:	6f 5f       	subi	r22, 0xFF	; 255
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	8f 4f       	sbci	r24, 0xFF	; 255
     cf6:	9f 4f       	sbci	r25, 0xFF	; 255
     cf8:	08 95       	ret

00000cfa <__fp_split3>:
     cfa:	57 fd       	sbrc	r21, 7
     cfc:	90 58       	subi	r25, 0x80	; 128
     cfe:	44 0f       	add	r20, r20
     d00:	55 1f       	adc	r21, r21
     d02:	59 f0       	breq	.+22     	; 0xd1a <__fp_splitA+0x10>
     d04:	5f 3f       	cpi	r21, 0xFF	; 255
     d06:	71 f0       	breq	.+28     	; 0xd24 <__fp_splitA+0x1a>
     d08:	47 95       	ror	r20

00000d0a <__fp_splitA>:
     d0a:	88 0f       	add	r24, r24
     d0c:	97 fb       	bst	r25, 7
     d0e:	99 1f       	adc	r25, r25
     d10:	61 f0       	breq	.+24     	; 0xd2a <__fp_splitA+0x20>
     d12:	9f 3f       	cpi	r25, 0xFF	; 255
     d14:	79 f0       	breq	.+30     	; 0xd34 <__fp_splitA+0x2a>
     d16:	87 95       	ror	r24
     d18:	08 95       	ret
     d1a:	12 16       	cp	r1, r18
     d1c:	13 06       	cpc	r1, r19
     d1e:	14 06       	cpc	r1, r20
     d20:	55 1f       	adc	r21, r21
     d22:	f2 cf       	rjmp	.-28     	; 0xd08 <__fp_split3+0xe>
     d24:	46 95       	lsr	r20
     d26:	f1 df       	rcall	.-30     	; 0xd0a <__fp_splitA>
     d28:	08 c0       	rjmp	.+16     	; 0xd3a <__fp_splitA+0x30>
     d2a:	16 16       	cp	r1, r22
     d2c:	17 06       	cpc	r1, r23
     d2e:	18 06       	cpc	r1, r24
     d30:	99 1f       	adc	r25, r25
     d32:	f1 cf       	rjmp	.-30     	; 0xd16 <__fp_splitA+0xc>
     d34:	86 95       	lsr	r24
     d36:	71 05       	cpc	r23, r1
     d38:	61 05       	cpc	r22, r1
     d3a:	08 94       	sec
     d3c:	08 95       	ret

00000d3e <__fp_zero>:
     d3e:	e8 94       	clt

00000d40 <__fp_szero>:
     d40:	bb 27       	eor	r27, r27
     d42:	66 27       	eor	r22, r22
     d44:	77 27       	eor	r23, r23
     d46:	cb 01       	movw	r24, r22
     d48:	97 f9       	bld	r25, 7
     d4a:	08 95       	ret

00000d4c <__mulsf3>:
     d4c:	0b d0       	rcall	.+22     	; 0xd64 <__mulsf3x>
     d4e:	c4 cf       	rjmp	.-120    	; 0xcd8 <__fp_round>
     d50:	b5 df       	rcall	.-150    	; 0xcbc <__fp_pscA>
     d52:	28 f0       	brcs	.+10     	; 0xd5e <__mulsf3+0x12>
     d54:	ba df       	rcall	.-140    	; 0xcca <__fp_pscB>
     d56:	18 f0       	brcs	.+6      	; 0xd5e <__mulsf3+0x12>
     d58:	95 23       	and	r25, r21
     d5a:	09 f0       	breq	.+2      	; 0xd5e <__mulsf3+0x12>
     d5c:	a6 cf       	rjmp	.-180    	; 0xcaa <__fp_inf>
     d5e:	ab cf       	rjmp	.-170    	; 0xcb6 <__fp_nan>
     d60:	11 24       	eor	r1, r1
     d62:	ee cf       	rjmp	.-36     	; 0xd40 <__fp_szero>

00000d64 <__mulsf3x>:
     d64:	ca df       	rcall	.-108    	; 0xcfa <__fp_split3>
     d66:	a0 f3       	brcs	.-24     	; 0xd50 <__mulsf3+0x4>

00000d68 <__mulsf3_pse>:
     d68:	95 9f       	mul	r25, r21
     d6a:	d1 f3       	breq	.-12     	; 0xd60 <__mulsf3+0x14>
     d6c:	95 0f       	add	r25, r21
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	55 1f       	adc	r21, r21
     d72:	62 9f       	mul	r22, r18
     d74:	f0 01       	movw	r30, r0
     d76:	72 9f       	mul	r23, r18
     d78:	bb 27       	eor	r27, r27
     d7a:	f0 0d       	add	r31, r0
     d7c:	b1 1d       	adc	r27, r1
     d7e:	63 9f       	mul	r22, r19
     d80:	aa 27       	eor	r26, r26
     d82:	f0 0d       	add	r31, r0
     d84:	b1 1d       	adc	r27, r1
     d86:	aa 1f       	adc	r26, r26
     d88:	64 9f       	mul	r22, r20
     d8a:	66 27       	eor	r22, r22
     d8c:	b0 0d       	add	r27, r0
     d8e:	a1 1d       	adc	r26, r1
     d90:	66 1f       	adc	r22, r22
     d92:	82 9f       	mul	r24, r18
     d94:	22 27       	eor	r18, r18
     d96:	b0 0d       	add	r27, r0
     d98:	a1 1d       	adc	r26, r1
     d9a:	62 1f       	adc	r22, r18
     d9c:	73 9f       	mul	r23, r19
     d9e:	b0 0d       	add	r27, r0
     da0:	a1 1d       	adc	r26, r1
     da2:	62 1f       	adc	r22, r18
     da4:	83 9f       	mul	r24, r19
     da6:	a0 0d       	add	r26, r0
     da8:	61 1d       	adc	r22, r1
     daa:	22 1f       	adc	r18, r18
     dac:	74 9f       	mul	r23, r20
     dae:	33 27       	eor	r19, r19
     db0:	a0 0d       	add	r26, r0
     db2:	61 1d       	adc	r22, r1
     db4:	23 1f       	adc	r18, r19
     db6:	84 9f       	mul	r24, r20
     db8:	60 0d       	add	r22, r0
     dba:	21 1d       	adc	r18, r1
     dbc:	82 2f       	mov	r24, r18
     dbe:	76 2f       	mov	r23, r22
     dc0:	6a 2f       	mov	r22, r26
     dc2:	11 24       	eor	r1, r1
     dc4:	9f 57       	subi	r25, 0x7F	; 127
     dc6:	50 40       	sbci	r21, 0x00	; 0
     dc8:	8a f0       	brmi	.+34     	; 0xdec <__mulsf3_pse+0x84>
     dca:	e1 f0       	breq	.+56     	; 0xe04 <__mulsf3_pse+0x9c>
     dcc:	88 23       	and	r24, r24
     dce:	4a f0       	brmi	.+18     	; 0xde2 <__mulsf3_pse+0x7a>
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	bb 1f       	adc	r27, r27
     dd6:	66 1f       	adc	r22, r22
     dd8:	77 1f       	adc	r23, r23
     dda:	88 1f       	adc	r24, r24
     ddc:	91 50       	subi	r25, 0x01	; 1
     dde:	50 40       	sbci	r21, 0x00	; 0
     de0:	a9 f7       	brne	.-22     	; 0xdcc <__mulsf3_pse+0x64>
     de2:	9e 3f       	cpi	r25, 0xFE	; 254
     de4:	51 05       	cpc	r21, r1
     de6:	70 f0       	brcs	.+28     	; 0xe04 <__mulsf3_pse+0x9c>
     de8:	60 cf       	rjmp	.-320    	; 0xcaa <__fp_inf>
     dea:	aa cf       	rjmp	.-172    	; 0xd40 <__fp_szero>
     dec:	5f 3f       	cpi	r21, 0xFF	; 255
     dee:	ec f3       	brlt	.-6      	; 0xdea <__mulsf3_pse+0x82>
     df0:	98 3e       	cpi	r25, 0xE8	; 232
     df2:	dc f3       	brlt	.-10     	; 0xdea <__mulsf3_pse+0x82>
     df4:	86 95       	lsr	r24
     df6:	77 95       	ror	r23
     df8:	67 95       	ror	r22
     dfa:	b7 95       	ror	r27
     dfc:	f7 95       	ror	r31
     dfe:	e7 95       	ror	r30
     e00:	9f 5f       	subi	r25, 0xFF	; 255
     e02:	c1 f7       	brne	.-16     	; 0xdf4 <__mulsf3_pse+0x8c>
     e04:	fe 2b       	or	r31, r30
     e06:	88 0f       	add	r24, r24
     e08:	91 1d       	adc	r25, r1
     e0a:	96 95       	lsr	r25
     e0c:	87 95       	ror	r24
     e0e:	97 f9       	bld	r25, 7
     e10:	08 95       	ret

00000e12 <pow>:
     e12:	fa 01       	movw	r30, r20
     e14:	ee 0f       	add	r30, r30
     e16:	ff 1f       	adc	r31, r31
     e18:	30 96       	adiw	r30, 0x00	; 0
     e1a:	21 05       	cpc	r18, r1
     e1c:	31 05       	cpc	r19, r1
     e1e:	99 f1       	breq	.+102    	; 0xe86 <pow+0x74>
     e20:	61 15       	cp	r22, r1
     e22:	71 05       	cpc	r23, r1
     e24:	61 f4       	brne	.+24     	; 0xe3e <pow+0x2c>
     e26:	80 38       	cpi	r24, 0x80	; 128
     e28:	bf e3       	ldi	r27, 0x3F	; 63
     e2a:	9b 07       	cpc	r25, r27
     e2c:	49 f1       	breq	.+82     	; 0xe80 <pow+0x6e>
     e2e:	68 94       	set
     e30:	90 38       	cpi	r25, 0x80	; 128
     e32:	81 05       	cpc	r24, r1
     e34:	61 f0       	breq	.+24     	; 0xe4e <pow+0x3c>
     e36:	80 38       	cpi	r24, 0x80	; 128
     e38:	bf ef       	ldi	r27, 0xFF	; 255
     e3a:	9b 07       	cpc	r25, r27
     e3c:	41 f0       	breq	.+16     	; 0xe4e <pow+0x3c>
     e3e:	99 23       	and	r25, r25
     e40:	42 f5       	brpl	.+80     	; 0xe92 <pow+0x80>
     e42:	ff 3f       	cpi	r31, 0xFF	; 255
     e44:	e1 05       	cpc	r30, r1
     e46:	31 05       	cpc	r19, r1
     e48:	21 05       	cpc	r18, r1
     e4a:	11 f1       	breq	.+68     	; 0xe90 <pow+0x7e>
     e4c:	e8 94       	clt
     e4e:	08 94       	sec
     e50:	e7 95       	ror	r30
     e52:	d9 01       	movw	r26, r18
     e54:	aa 23       	and	r26, r26
     e56:	29 f4       	brne	.+10     	; 0xe62 <pow+0x50>
     e58:	ab 2f       	mov	r26, r27
     e5a:	be 2f       	mov	r27, r30
     e5c:	f8 5f       	subi	r31, 0xF8	; 248
     e5e:	d0 f3       	brcs	.-12     	; 0xe54 <pow+0x42>
     e60:	10 c0       	rjmp	.+32     	; 0xe82 <pow+0x70>
     e62:	ff 5f       	subi	r31, 0xFF	; 255
     e64:	70 f4       	brcc	.+28     	; 0xe82 <pow+0x70>
     e66:	a6 95       	lsr	r26
     e68:	e0 f7       	brcc	.-8      	; 0xe62 <pow+0x50>
     e6a:	f7 39       	cpi	r31, 0x97	; 151
     e6c:	50 f0       	brcs	.+20     	; 0xe82 <pow+0x70>
     e6e:	19 f0       	breq	.+6      	; 0xe76 <pow+0x64>
     e70:	ff 3a       	cpi	r31, 0xAF	; 175
     e72:	38 f4       	brcc	.+14     	; 0xe82 <pow+0x70>
     e74:	9f 77       	andi	r25, 0x7F	; 127
     e76:	9f 93       	push	r25
     e78:	0c d0       	rcall	.+24     	; 0xe92 <pow+0x80>
     e7a:	0f 90       	pop	r0
     e7c:	07 fc       	sbrc	r0, 7
     e7e:	90 58       	subi	r25, 0x80	; 128
     e80:	08 95       	ret
     e82:	3e f0       	brts	.+14     	; 0xe92 <pow+0x80>
     e84:	18 cf       	rjmp	.-464    	; 0xcb6 <__fp_nan>
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	80 e8       	ldi	r24, 0x80	; 128
     e8c:	9f e3       	ldi	r25, 0x3F	; 63
     e8e:	08 95       	ret
     e90:	4f e7       	ldi	r20, 0x7F	; 127
     e92:	9f 77       	andi	r25, 0x7F	; 127
     e94:	5f 93       	push	r21
     e96:	4f 93       	push	r20
     e98:	3f 93       	push	r19
     e9a:	2f 93       	push	r18
     e9c:	9e d0       	rcall	.+316    	; 0xfda <log>
     e9e:	2f 91       	pop	r18
     ea0:	3f 91       	pop	r19
     ea2:	4f 91       	pop	r20
     ea4:	5f 91       	pop	r21
     ea6:	52 df       	rcall	.-348    	; 0xd4c <__mulsf3>
     ea8:	05 c0       	rjmp	.+10     	; 0xeb4 <exp>
     eaa:	19 f4       	brne	.+6      	; 0xeb2 <pow+0xa0>
     eac:	0e f0       	brts	.+2      	; 0xeb0 <pow+0x9e>
     eae:	fd ce       	rjmp	.-518    	; 0xcaa <__fp_inf>
     eb0:	46 cf       	rjmp	.-372    	; 0xd3e <__fp_zero>
     eb2:	01 cf       	rjmp	.-510    	; 0xcb6 <__fp_nan>

00000eb4 <exp>:
     eb4:	2a df       	rcall	.-428    	; 0xd0a <__fp_splitA>
     eb6:	c8 f3       	brcs	.-14     	; 0xeaa <pow+0x98>
     eb8:	96 38       	cpi	r25, 0x86	; 134
     eba:	c0 f7       	brcc	.-16     	; 0xeac <pow+0x9a>
     ebc:	07 f8       	bld	r0, 7
     ebe:	0f 92       	push	r0
     ec0:	e8 94       	clt
     ec2:	2b e3       	ldi	r18, 0x3B	; 59
     ec4:	3a ea       	ldi	r19, 0xAA	; 170
     ec6:	48 eb       	ldi	r20, 0xB8	; 184
     ec8:	5f e7       	ldi	r21, 0x7F	; 127
     eca:	4e df       	rcall	.-356    	; 0xd68 <__mulsf3_pse>
     ecc:	0f 92       	push	r0
     ece:	0f 92       	push	r0
     ed0:	0f 92       	push	r0
     ed2:	4d b7       	in	r20, 0x3d	; 61
     ed4:	5e b7       	in	r21, 0x3e	; 62
     ed6:	0f 92       	push	r0
     ed8:	c0 d0       	rcall	.+384    	; 0x105a <modf>
     eda:	e0 e7       	ldi	r30, 0x70	; 112
     edc:	f1 e0       	ldi	r31, 0x01	; 1
     ede:	16 d0       	rcall	.+44     	; 0xf0c <__fp_powser>
     ee0:	4f 91       	pop	r20
     ee2:	5f 91       	pop	r21
     ee4:	ef 91       	pop	r30
     ee6:	ff 91       	pop	r31
     ee8:	e5 95       	asr	r30
     eea:	ee 1f       	adc	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	49 f0       	breq	.+18     	; 0xf02 <exp+0x4e>
     ef0:	fe 57       	subi	r31, 0x7E	; 126
     ef2:	e0 68       	ori	r30, 0x80	; 128
     ef4:	44 27       	eor	r20, r20
     ef6:	ee 0f       	add	r30, r30
     ef8:	44 1f       	adc	r20, r20
     efa:	fa 95       	dec	r31
     efc:	e1 f7       	brne	.-8      	; 0xef6 <exp+0x42>
     efe:	41 95       	neg	r20
     f00:	55 0b       	sbc	r21, r21
     f02:	32 d0       	rcall	.+100    	; 0xf68 <ldexp>
     f04:	0f 90       	pop	r0
     f06:	07 fe       	sbrs	r0, 7
     f08:	26 c0       	rjmp	.+76     	; 0xf56 <inverse>
     f0a:	08 95       	ret

00000f0c <__fp_powser>:
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	1f 93       	push	r17
     f12:	0f 93       	push	r16
     f14:	ff 92       	push	r15
     f16:	ef 92       	push	r14
     f18:	df 92       	push	r13
     f1a:	7b 01       	movw	r14, r22
     f1c:	8c 01       	movw	r16, r24
     f1e:	68 94       	set
     f20:	05 c0       	rjmp	.+10     	; 0xf2c <__fp_powser+0x20>
     f22:	da 2e       	mov	r13, r26
     f24:	ef 01       	movw	r28, r30
     f26:	1e df       	rcall	.-452    	; 0xd64 <__mulsf3x>
     f28:	fe 01       	movw	r30, r28
     f2a:	e8 94       	clt
     f2c:	a5 91       	lpm	r26, Z+
     f2e:	25 91       	lpm	r18, Z+
     f30:	35 91       	lpm	r19, Z+
     f32:	45 91       	lpm	r20, Z+
     f34:	55 91       	lpm	r21, Z+
     f36:	ae f3       	brts	.-22     	; 0xf22 <__fp_powser+0x16>
     f38:	ef 01       	movw	r28, r30
     f3a:	d4 d0       	rcall	.+424    	; 0x10e4 <__addsf3x>
     f3c:	fe 01       	movw	r30, r28
     f3e:	97 01       	movw	r18, r14
     f40:	a8 01       	movw	r20, r16
     f42:	da 94       	dec	r13
     f44:	79 f7       	brne	.-34     	; 0xf24 <__fp_powser+0x18>
     f46:	df 90       	pop	r13
     f48:	ef 90       	pop	r14
     f4a:	ff 90       	pop	r15
     f4c:	0f 91       	pop	r16
     f4e:	1f 91       	pop	r17
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <inverse>:
     f56:	9b 01       	movw	r18, r22
     f58:	ac 01       	movw	r20, r24
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	80 e8       	ldi	r24, 0x80	; 128
     f60:	9f e3       	ldi	r25, 0x3F	; 63
     f62:	cd cd       	rjmp	.-1126   	; 0xafe <__divsf3>
     f64:	a2 ce       	rjmp	.-700    	; 0xcaa <__fp_inf>
     f66:	11 c1       	rjmp	.+546    	; 0x118a <__fp_mpack>

00000f68 <ldexp>:
     f68:	d0 de       	rcall	.-608    	; 0xd0a <__fp_splitA>
     f6a:	e8 f3       	brcs	.-6      	; 0xf66 <inverse+0x10>
     f6c:	99 23       	and	r25, r25
     f6e:	d9 f3       	breq	.-10     	; 0xf66 <inverse+0x10>
     f70:	94 0f       	add	r25, r20
     f72:	51 1d       	adc	r21, r1
     f74:	bb f3       	brvs	.-18     	; 0xf64 <inverse+0xe>
     f76:	91 50       	subi	r25, 0x01	; 1
     f78:	50 40       	sbci	r21, 0x00	; 0
     f7a:	94 f0       	brlt	.+36     	; 0xfa0 <ldexp+0x38>
     f7c:	59 f0       	breq	.+22     	; 0xf94 <ldexp+0x2c>
     f7e:	88 23       	and	r24, r24
     f80:	32 f0       	brmi	.+12     	; 0xf8e <ldexp+0x26>
     f82:	66 0f       	add	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	88 1f       	adc	r24, r24
     f88:	91 50       	subi	r25, 0x01	; 1
     f8a:	50 40       	sbci	r21, 0x00	; 0
     f8c:	c1 f7       	brne	.-16     	; 0xf7e <ldexp+0x16>
     f8e:	9e 3f       	cpi	r25, 0xFE	; 254
     f90:	51 05       	cpc	r21, r1
     f92:	44 f7       	brge	.-48     	; 0xf64 <inverse+0xe>
     f94:	88 0f       	add	r24, r24
     f96:	91 1d       	adc	r25, r1
     f98:	96 95       	lsr	r25
     f9a:	87 95       	ror	r24
     f9c:	97 f9       	bld	r25, 7
     f9e:	08 95       	ret
     fa0:	5f 3f       	cpi	r21, 0xFF	; 255
     fa2:	ac f0       	brlt	.+42     	; 0xfce <ldexp+0x66>
     fa4:	98 3e       	cpi	r25, 0xE8	; 232
     fa6:	9c f0       	brlt	.+38     	; 0xfce <ldexp+0x66>
     fa8:	bb 27       	eor	r27, r27
     faa:	86 95       	lsr	r24
     fac:	77 95       	ror	r23
     fae:	67 95       	ror	r22
     fb0:	b7 95       	ror	r27
     fb2:	08 f4       	brcc	.+2      	; 0xfb6 <ldexp+0x4e>
     fb4:	b1 60       	ori	r27, 0x01	; 1
     fb6:	93 95       	inc	r25
     fb8:	c1 f7       	brne	.-16     	; 0xfaa <ldexp+0x42>
     fba:	bb 0f       	add	r27, r27
     fbc:	58 f7       	brcc	.-42     	; 0xf94 <ldexp+0x2c>
     fbe:	11 f4       	brne	.+4      	; 0xfc4 <ldexp+0x5c>
     fc0:	60 ff       	sbrs	r22, 0
     fc2:	e8 cf       	rjmp	.-48     	; 0xf94 <ldexp+0x2c>
     fc4:	6f 5f       	subi	r22, 0xFF	; 255
     fc6:	7f 4f       	sbci	r23, 0xFF	; 255
     fc8:	8f 4f       	sbci	r24, 0xFF	; 255
     fca:	9f 4f       	sbci	r25, 0xFF	; 255
     fcc:	e3 cf       	rjmp	.-58     	; 0xf94 <ldexp+0x2c>
     fce:	b8 ce       	rjmp	.-656    	; 0xd40 <__fp_szero>
     fd0:	0e f0       	brts	.+2      	; 0xfd4 <ldexp+0x6c>
     fd2:	db c0       	rjmp	.+438    	; 0x118a <__fp_mpack>
     fd4:	70 ce       	rjmp	.-800    	; 0xcb6 <__fp_nan>
     fd6:	68 94       	set
     fd8:	68 ce       	rjmp	.-816    	; 0xcaa <__fp_inf>

00000fda <log>:
     fda:	97 de       	rcall	.-722    	; 0xd0a <__fp_splitA>
     fdc:	c8 f3       	brcs	.-14     	; 0xfd0 <ldexp+0x68>
     fde:	99 23       	and	r25, r25
     fe0:	d1 f3       	breq	.-12     	; 0xfd6 <ldexp+0x6e>
     fe2:	c6 f3       	brts	.-16     	; 0xfd4 <ldexp+0x6c>
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	1f 93       	push	r17
     fea:	0f 93       	push	r16
     fec:	ff 92       	push	r15
     fee:	c9 2f       	mov	r28, r25
     ff0:	dd 27       	eor	r29, r29
     ff2:	88 23       	and	r24, r24
     ff4:	2a f0       	brmi	.+10     	; 0x1000 <log+0x26>
     ff6:	21 97       	sbiw	r28, 0x01	; 1
     ff8:	66 0f       	add	r22, r22
     ffa:	77 1f       	adc	r23, r23
     ffc:	88 1f       	adc	r24, r24
     ffe:	da f7       	brpl	.-10     	; 0xff6 <log+0x1c>
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e8       	ldi	r20, 0x80	; 128
    1006:	5f eb       	ldi	r21, 0xBF	; 191
    1008:	9f e3       	ldi	r25, 0x3F	; 63
    100a:	88 39       	cpi	r24, 0x98	; 152
    100c:	20 f0       	brcs	.+8      	; 0x1016 <log+0x3c>
    100e:	80 3e       	cpi	r24, 0xE0	; 224
    1010:	30 f0       	brcs	.+12     	; 0x101e <log+0x44>
    1012:	21 96       	adiw	r28, 0x01	; 1
    1014:	8f 77       	andi	r24, 0x7F	; 127
    1016:	55 d0       	rcall	.+170    	; 0x10c2 <__addsf3>
    1018:	e8 e9       	ldi	r30, 0x98	; 152
    101a:	f1 e0       	ldi	r31, 0x01	; 1
    101c:	03 c0       	rjmp	.+6      	; 0x1024 <log+0x4a>
    101e:	51 d0       	rcall	.+162    	; 0x10c2 <__addsf3>
    1020:	e5 ec       	ldi	r30, 0xC5	; 197
    1022:	f1 e0       	ldi	r31, 0x01	; 1
    1024:	73 df       	rcall	.-282    	; 0xf0c <__fp_powser>
    1026:	8b 01       	movw	r16, r22
    1028:	be 01       	movw	r22, r28
    102a:	ec 01       	movw	r28, r24
    102c:	fb 2e       	mov	r15, r27
    102e:	6f 57       	subi	r22, 0x7F	; 127
    1030:	71 09       	sbc	r23, r1
    1032:	75 95       	asr	r23
    1034:	77 1f       	adc	r23, r23
    1036:	88 0b       	sbc	r24, r24
    1038:	99 0b       	sbc	r25, r25
    103a:	fc dd       	rcall	.-1032   	; 0xc34 <__floatsisf>
    103c:	28 e1       	ldi	r18, 0x18	; 24
    103e:	32 e7       	ldi	r19, 0x72	; 114
    1040:	41 e3       	ldi	r20, 0x31	; 49
    1042:	5f e3       	ldi	r21, 0x3F	; 63
    1044:	8f de       	rcall	.-738    	; 0xd64 <__mulsf3x>
    1046:	af 2d       	mov	r26, r15
    1048:	98 01       	movw	r18, r16
    104a:	ae 01       	movw	r20, r28
    104c:	ff 90       	pop	r15
    104e:	0f 91       	pop	r16
    1050:	1f 91       	pop	r17
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	46 d0       	rcall	.+140    	; 0x10e4 <__addsf3x>
    1058:	3f ce       	rjmp	.-898    	; 0xcd8 <__fp_round>

0000105a <modf>:
    105a:	fa 01       	movw	r30, r20
    105c:	dc 01       	movw	r26, r24
    105e:	aa 0f       	add	r26, r26
    1060:	bb 1f       	adc	r27, r27
    1062:	9b 01       	movw	r18, r22
    1064:	ac 01       	movw	r20, r24
    1066:	bf 57       	subi	r27, 0x7F	; 127
    1068:	28 f4       	brcc	.+10     	; 0x1074 <modf+0x1a>
    106a:	22 27       	eor	r18, r18
    106c:	33 27       	eor	r19, r19
    106e:	44 27       	eor	r20, r20
    1070:	50 78       	andi	r21, 0x80	; 128
    1072:	1f c0       	rjmp	.+62     	; 0x10b2 <modf+0x58>
    1074:	b7 51       	subi	r27, 0x17	; 23
    1076:	88 f4       	brcc	.+34     	; 0x109a <modf+0x40>
    1078:	ab 2f       	mov	r26, r27
    107a:	00 24       	eor	r0, r0
    107c:	46 95       	lsr	r20
    107e:	37 95       	ror	r19
    1080:	27 95       	ror	r18
    1082:	01 1c       	adc	r0, r1
    1084:	a3 95       	inc	r26
    1086:	d2 f3       	brmi	.-12     	; 0x107c <modf+0x22>
    1088:	00 20       	and	r0, r0
    108a:	69 f0       	breq	.+26     	; 0x10a6 <modf+0x4c>
    108c:	22 0f       	add	r18, r18
    108e:	33 1f       	adc	r19, r19
    1090:	44 1f       	adc	r20, r20
    1092:	b3 95       	inc	r27
    1094:	da f3       	brmi	.-10     	; 0x108c <modf+0x32>
    1096:	0d d0       	rcall	.+26     	; 0x10b2 <modf+0x58>
    1098:	13 c0       	rjmp	.+38     	; 0x10c0 <__subsf3>
    109a:	61 30       	cpi	r22, 0x01	; 1
    109c:	71 05       	cpc	r23, r1
    109e:	a0 e8       	ldi	r26, 0x80	; 128
    10a0:	8a 07       	cpc	r24, r26
    10a2:	b9 46       	sbci	r27, 0x69	; 105
    10a4:	30 f4       	brcc	.+12     	; 0x10b2 <modf+0x58>
    10a6:	9b 01       	movw	r18, r22
    10a8:	ac 01       	movw	r20, r24
    10aa:	66 27       	eor	r22, r22
    10ac:	77 27       	eor	r23, r23
    10ae:	88 27       	eor	r24, r24
    10b0:	90 78       	andi	r25, 0x80	; 128
    10b2:	30 96       	adiw	r30, 0x00	; 0
    10b4:	21 f0       	breq	.+8      	; 0x10be <modf+0x64>
    10b6:	20 83       	st	Z, r18
    10b8:	31 83       	std	Z+1, r19	; 0x01
    10ba:	42 83       	std	Z+2, r20	; 0x02
    10bc:	53 83       	std	Z+3, r21	; 0x03
    10be:	08 95       	ret

000010c0 <__subsf3>:
    10c0:	50 58       	subi	r21, 0x80	; 128

000010c2 <__addsf3>:
    10c2:	bb 27       	eor	r27, r27
    10c4:	aa 27       	eor	r26, r26
    10c6:	0e d0       	rcall	.+28     	; 0x10e4 <__addsf3x>
    10c8:	07 ce       	rjmp	.-1010   	; 0xcd8 <__fp_round>
    10ca:	f8 dd       	rcall	.-1040   	; 0xcbc <__fp_pscA>
    10cc:	30 f0       	brcs	.+12     	; 0x10da <__addsf3+0x18>
    10ce:	fd dd       	rcall	.-1030   	; 0xcca <__fp_pscB>
    10d0:	20 f0       	brcs	.+8      	; 0x10da <__addsf3+0x18>
    10d2:	31 f4       	brne	.+12     	; 0x10e0 <__addsf3+0x1e>
    10d4:	9f 3f       	cpi	r25, 0xFF	; 255
    10d6:	11 f4       	brne	.+4      	; 0x10dc <__addsf3+0x1a>
    10d8:	1e f4       	brtc	.+6      	; 0x10e0 <__addsf3+0x1e>
    10da:	ed cd       	rjmp	.-1062   	; 0xcb6 <__fp_nan>
    10dc:	0e f4       	brtc	.+2      	; 0x10e0 <__addsf3+0x1e>
    10de:	e0 95       	com	r30
    10e0:	e7 fb       	bst	r30, 7
    10e2:	e3 cd       	rjmp	.-1082   	; 0xcaa <__fp_inf>

000010e4 <__addsf3x>:
    10e4:	e9 2f       	mov	r30, r25
    10e6:	09 de       	rcall	.-1006   	; 0xcfa <__fp_split3>
    10e8:	80 f3       	brcs	.-32     	; 0x10ca <__addsf3+0x8>
    10ea:	ba 17       	cp	r27, r26
    10ec:	62 07       	cpc	r22, r18
    10ee:	73 07       	cpc	r23, r19
    10f0:	84 07       	cpc	r24, r20
    10f2:	95 07       	cpc	r25, r21
    10f4:	18 f0       	brcs	.+6      	; 0x10fc <__addsf3x+0x18>
    10f6:	71 f4       	brne	.+28     	; 0x1114 <__addsf3x+0x30>
    10f8:	9e f5       	brtc	.+102    	; 0x1160 <__addsf3x+0x7c>
    10fa:	21 ce       	rjmp	.-958    	; 0xd3e <__fp_zero>
    10fc:	0e f4       	brtc	.+2      	; 0x1100 <__addsf3x+0x1c>
    10fe:	e0 95       	com	r30
    1100:	0b 2e       	mov	r0, r27
    1102:	ba 2f       	mov	r27, r26
    1104:	a0 2d       	mov	r26, r0
    1106:	0b 01       	movw	r0, r22
    1108:	b9 01       	movw	r22, r18
    110a:	90 01       	movw	r18, r0
    110c:	0c 01       	movw	r0, r24
    110e:	ca 01       	movw	r24, r20
    1110:	a0 01       	movw	r20, r0
    1112:	11 24       	eor	r1, r1
    1114:	ff 27       	eor	r31, r31
    1116:	59 1b       	sub	r21, r25
    1118:	99 f0       	breq	.+38     	; 0x1140 <__addsf3x+0x5c>
    111a:	59 3f       	cpi	r21, 0xF9	; 249
    111c:	50 f4       	brcc	.+20     	; 0x1132 <__addsf3x+0x4e>
    111e:	50 3e       	cpi	r21, 0xE0	; 224
    1120:	68 f1       	brcs	.+90     	; 0x117c <__addsf3x+0x98>
    1122:	1a 16       	cp	r1, r26
    1124:	f0 40       	sbci	r31, 0x00	; 0
    1126:	a2 2f       	mov	r26, r18
    1128:	23 2f       	mov	r18, r19
    112a:	34 2f       	mov	r19, r20
    112c:	44 27       	eor	r20, r20
    112e:	58 5f       	subi	r21, 0xF8	; 248
    1130:	f3 cf       	rjmp	.-26     	; 0x1118 <__addsf3x+0x34>
    1132:	46 95       	lsr	r20
    1134:	37 95       	ror	r19
    1136:	27 95       	ror	r18
    1138:	a7 95       	ror	r26
    113a:	f0 40       	sbci	r31, 0x00	; 0
    113c:	53 95       	inc	r21
    113e:	c9 f7       	brne	.-14     	; 0x1132 <__addsf3x+0x4e>
    1140:	7e f4       	brtc	.+30     	; 0x1160 <__addsf3x+0x7c>
    1142:	1f 16       	cp	r1, r31
    1144:	ba 0b       	sbc	r27, r26
    1146:	62 0b       	sbc	r22, r18
    1148:	73 0b       	sbc	r23, r19
    114a:	84 0b       	sbc	r24, r20
    114c:	ba f0       	brmi	.+46     	; 0x117c <__addsf3x+0x98>
    114e:	91 50       	subi	r25, 0x01	; 1
    1150:	a1 f0       	breq	.+40     	; 0x117a <__addsf3x+0x96>
    1152:	ff 0f       	add	r31, r31
    1154:	bb 1f       	adc	r27, r27
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	88 1f       	adc	r24, r24
    115c:	c2 f7       	brpl	.-16     	; 0x114e <__addsf3x+0x6a>
    115e:	0e c0       	rjmp	.+28     	; 0x117c <__addsf3x+0x98>
    1160:	ba 0f       	add	r27, r26
    1162:	62 1f       	adc	r22, r18
    1164:	73 1f       	adc	r23, r19
    1166:	84 1f       	adc	r24, r20
    1168:	48 f4       	brcc	.+18     	; 0x117c <__addsf3x+0x98>
    116a:	87 95       	ror	r24
    116c:	77 95       	ror	r23
    116e:	67 95       	ror	r22
    1170:	b7 95       	ror	r27
    1172:	f7 95       	ror	r31
    1174:	9e 3f       	cpi	r25, 0xFE	; 254
    1176:	08 f0       	brcs	.+2      	; 0x117a <__addsf3x+0x96>
    1178:	b3 cf       	rjmp	.-154    	; 0x10e0 <__addsf3+0x1e>
    117a:	93 95       	inc	r25
    117c:	88 0f       	add	r24, r24
    117e:	08 f0       	brcs	.+2      	; 0x1182 <__addsf3x+0x9e>
    1180:	99 27       	eor	r25, r25
    1182:	ee 0f       	add	r30, r30
    1184:	97 95       	ror	r25
    1186:	87 95       	ror	r24
    1188:	08 95       	ret

0000118a <__fp_mpack>:
    118a:	9f 3f       	cpi	r25, 0xFF	; 255
    118c:	31 f0       	breq	.+12     	; 0x119a <__fp_mpack_finite+0xc>

0000118e <__fp_mpack_finite>:
    118e:	91 50       	subi	r25, 0x01	; 1
    1190:	20 f4       	brcc	.+8      	; 0x119a <__fp_mpack_finite+0xc>
    1192:	87 95       	ror	r24
    1194:	77 95       	ror	r23
    1196:	67 95       	ror	r22
    1198:	b7 95       	ror	r27
    119a:	88 0f       	add	r24, r24
    119c:	91 1d       	adc	r25, r1
    119e:	96 95       	lsr	r25
    11a0:	87 95       	ror	r24
    11a2:	97 f9       	bld	r25, 7
    11a4:	08 95       	ret

000011a6 <_exit>:
    11a6:	f8 94       	cli

000011a8 <__stop_program>:
    11a8:	ff cf       	rjmp	.-2      	; 0x11a8 <__stop_program>
