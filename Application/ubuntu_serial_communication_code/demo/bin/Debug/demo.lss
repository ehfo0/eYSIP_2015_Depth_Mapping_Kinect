
bin/Debug/demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000ff0  00001084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ff0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800206  00800206  0000108a  2**0
                  ALLOC
  3 .stab         00004ef0  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000166c  00000000  00000000  00005f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000075e8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 01 	jmp	0x278	; 0x278 <__ctors_end>
   4:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
   8:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
   c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  10:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  14:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  18:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  1c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  20:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  24:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  28:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  2c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  30:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  34:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  38:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  3c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  40:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  44:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  48:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  4c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  50:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  54:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  58:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  5c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  60:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  64:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__vector_25>
  68:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  6c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  70:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  74:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  78:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  7c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  80:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  84:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  88:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  8c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  90:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  94:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  98:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  9c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  a0:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  a4:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  a8:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  ac:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  b0:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  b4:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  b8:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  bc:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  c0:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  c4:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  c8:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  cc:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  d0:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  d4:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  d8:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  dc:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  e0:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
  e4:	0e 04       	cpc	r0, r14
  e6:	c8 03       	fmulsu	r20, r16
  e8:	d5 03       	fmuls	r21, r21
  ea:	d8 03       	fmulsu	r21, r16
  ec:	db 03       	fmulsu	r21, r19
  ee:	45 04       	cpc	r4, r5
  f0:	45 04       	cpc	r4, r5
  f2:	45 04       	cpc	r4, r5
  f4:	45 04       	cpc	r4, r5
  f6:	45 04       	cpc	r4, r5
  f8:	45 04       	cpc	r4, r5
  fa:	45 04       	cpc	r4, r5
  fc:	45 04       	cpc	r4, r5
  fe:	45 04       	cpc	r4, r5
 100:	45 04       	cpc	r4, r5
 102:	45 04       	cpc	r4, r5
 104:	de 03       	fmulsu	r21, r22
 106:	e1 03       	fmuls	r22, r17
 108:	e4 03       	fmuls	r22, r20
 10a:	e7 03       	fmuls	r22, r23
 10c:	ea 03       	fmulsu	r22, r18
 10e:	45 04       	cpc	r4, r5
 110:	45 04       	cpc	r4, r5
 112:	45 04       	cpc	r4, r5
 114:	45 04       	cpc	r4, r5
 116:	45 04       	cpc	r4, r5
 118:	45 04       	cpc	r4, r5
 11a:	45 04       	cpc	r4, r5
 11c:	45 04       	cpc	r4, r5
 11e:	45 04       	cpc	r4, r5
 120:	45 04       	cpc	r4, r5
 122:	45 04       	cpc	r4, r5
 124:	f3 03       	fmuls	r23, r19
 126:	f6 03       	fmuls	r23, r22
 128:	f9 03       	fmulsu	r23, r17
 12a:	fc 03       	fmulsu	r23, r20
 12c:	15 04       	cpc	r1, r5
 12e:	45 04       	cpc	r4, r5
 130:	45 04       	cpc	r4, r5
 132:	45 04       	cpc	r4, r5
 134:	45 04       	cpc	r4, r5
 136:	45 04       	cpc	r4, r5
 138:	45 04       	cpc	r4, r5
 13a:	45 04       	cpc	r4, r5
 13c:	45 04       	cpc	r4, r5
 13e:	45 04       	cpc	r4, r5
 140:	45 04       	cpc	r4, r5
 142:	45 04       	cpc	r4, r5
 144:	ff 03       	fmulsu	r23, r23
 146:	02 04       	cpc	r0, r2
 148:	05 04       	cpc	r0, r5
 14a:	0e 04       	cpc	r0, r14
 14c:	15 04       	cpc	r1, r5
 14e:	39 04       	cpc	r3, r9
 150:	45 04       	cpc	r4, r5
 152:	33 04       	cpc	r3, r3
 154:	45 04       	cpc	r4, r5
 156:	36 04       	cpc	r3, r6
 158:	45 04       	cpc	r4, r5
 15a:	45 04       	cpc	r4, r5
 15c:	45 04       	cpc	r4, r5
 15e:	45 04       	cpc	r4, r5
 160:	45 04       	cpc	r4, r5
 162:	45 04       	cpc	r4, r5
 164:	1e 04       	cpc	r1, r14
 166:	21 04       	cpc	r2, r1
 168:	24 04       	cpc	r2, r4
 16a:	24 04       	cpc	r2, r4
 16c:	2d 04       	cpc	r2, r13
 16e:	30 04       	cpc	r3, r0
 170:	45 04       	cpc	r4, r5
 172:	45 04       	cpc	r4, r5
 174:	45 04       	cpc	r4, r5
 176:	45 04       	cpc	r4, r5
 178:	45 04       	cpc	r4, r5
 17a:	45 04       	cpc	r4, r5
 17c:	45 04       	cpc	r4, r5
 17e:	45 04       	cpc	r4, r5
 180:	45 04       	cpc	r4, r5
 182:	45 04       	cpc	r4, r5
 184:	42 04       	cpc	r4, r2
 186:	07 63       	ori	r16, 0x37	; 55
 188:	42 36       	cpi	r20, 0x62	; 98
 18a:	b7 9b       	sbis	0x16, 7	; 22
 18c:	d8 a7       	std	Y+40, r29	; 0x28
 18e:	1a 39       	cpi	r17, 0x9A	; 154
 190:	68 56       	subi	r22, 0x68	; 104
 192:	18 ae       	std	Y+56, r1	; 0x38
 194:	ba ab       	std	Y+50, r27	; 0x32
 196:	55 8c       	ldd	r5, Z+29	; 0x1d
 198:	1d 3c       	cpi	r17, 0xCD	; 205
 19a:	b7 cc       	rjmp	.-1682   	; 0xfffffb0a <__eeprom_end+0xff7efb0a>
 19c:	57 63       	ori	r21, 0x37	; 55
 19e:	bd 6d       	ori	r27, 0xDD	; 221
 1a0:	ed fd       	.word	0xfded	; ????
 1a2:	75 3e       	cpi	r23, 0xE5	; 229
 1a4:	f6 17       	cp	r31, r22
 1a6:	72 31       	cpi	r23, 0x12	; 18
 1a8:	bf 00       	.word	0x00bf	; ????
 1aa:	00 00       	nop
 1ac:	80 3f       	cpi	r24, 0xF0	; 240
 1ae:	08 00       	.word	0x0008	; ????
 1b0:	00 00       	nop
 1b2:	be 92       	st	-X, r11
 1b4:	24 49       	sbci	r18, 0x94	; 148
 1b6:	12 3e       	cpi	r17, 0xE2	; 226
 1b8:	ab aa       	std	Y+51, r10	; 0x33
 1ba:	aa 2a       	or	r10, r26
 1bc:	be cd       	rjmp	.-1156   	; 0xfffffd3a <__eeprom_end+0xff7efd3a>
 1be:	cc cc       	rjmp	.-1640   	; 0xfffffb58 <__eeprom_end+0xff7efb58>
 1c0:	4c 3e       	cpi	r20, 0xEC	; 236
 1c2:	00 00       	nop
 1c4:	00 80       	ld	r0, Z
 1c6:	be ab       	std	Y+54, r27	; 0x36
 1c8:	aa aa       	std	Y+50, r10	; 0x32
 1ca:	aa 3e       	cpi	r26, 0xEA	; 234
 1cc:	00 00       	nop
 1ce:	00 00       	nop
 1d0:	bf 00       	.word	0x00bf	; ????
 1d2:	00 00       	nop
 1d4:	80 3f       	cpi	r24, 0xF0	; 240
 1d6:	00 00       	nop
 1d8:	00 00       	nop
 1da:	00 08       	sbc	r0, r0
 1dc:	41 78       	andi	r20, 0x81	; 129
 1de:	d3 bb       	out	0x13, r29	; 19
 1e0:	43 87       	std	Z+11, r20	; 0x0b
 1e2:	d1 13       	cpse	r29, r17
 1e4:	3d 19       	sub	r19, r13
 1e6:	0e 3c       	cpi	r16, 0xCE	; 206
 1e8:	c3 bd       	out	0x23, r28	; 35
 1ea:	42 82       	std	Z+2, r4	; 0x02
 1ec:	ad 2b       	or	r26, r29
 1ee:	3e 68       	ori	r19, 0x8E	; 142
 1f0:	ec 82       	std	Y+4, r14	; 0x04
 1f2:	76 be       	out	0x36, r7	; 54
 1f4:	d9 8f       	std	Y+25, r29	; 0x19
 1f6:	e1 a9       	ldd	r30, Z+49	; 0x31
 1f8:	3e 4c       	sbci	r19, 0xCE	; 206
 1fa:	80 ef       	ldi	r24, 0xF0	; 240
 1fc:	ff be       	out	0x3f, r15	; 63
 1fe:	01 c4       	rjmp	.+2050   	; 0xa02 <__divsf3_pse+0xa0>
 200:	ff 7f       	andi	r31, 0xFF	; 255
 202:	3f 00       	.word	0x003f	; ????
 204:	00 00       	nop
	...

00000208 <__trampolines_start>:
 208:	0c 94 30 04 	jmp	0x860	; 0x860 <__vector_25+0x112>
 20c:	0c 94 24 04 	jmp	0x848	; 0x848 <__vector_25+0xfa>
 210:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__vector_25+0xaa>
 214:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__vector_25+0x10c>
 218:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_25+0x11e>
 21c:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__vector_25+0x6e>
 220:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__vector_25+0x74>
 224:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__vector_25+0x86>
 228:	0c 94 02 04 	jmp	0x804	; 0x804 <__vector_25+0xb6>
 22c:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__vector_25+0xee>
 230:	0c 94 45 04 	jmp	0x88a	; 0x88a <__vector_25+0x13c>
 234:	0c 94 42 04 	jmp	0x884	; 0x884 <__vector_25+0x136>
 238:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__vector_25+0xa4>
 23c:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__vector_25+0x68>
 240:	0c 94 33 04 	jmp	0x866	; 0x866 <__vector_25+0x118>
 244:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_25+0xbc>
 248:	0c 94 21 04 	jmp	0x842	; 0x842 <__vector_25+0xf4>
 24c:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__vector_25+0x5c>
 250:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_25+0x7a>
 254:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__vector_25+0xce>
 258:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_25+0x98>
 25c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__vector_25+0x42>
 260:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__vector_25+0xb0>
 264:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_25+0x80>
 268:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__vector_25+0x9e>
 26c:	0c 94 15 04 	jmp	0x82a	; 0x82a <__vector_25+0xdc>
 270:	0c 94 39 04 	jmp	0x872	; 0x872 <__vector_25+0x124>
 274:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__vector_25+0x62>

00000278 <__ctors_end>:
 278:	11 24       	eor	r1, r1
 27a:	1f be       	out	0x3f, r1	; 63
 27c:	cf ef       	ldi	r28, 0xFF	; 255
 27e:	d1 e2       	ldi	r29, 0x21	; 33
 280:	de bf       	out	0x3e, r29	; 62
 282:	cd bf       	out	0x3d, r28	; 61
 284:	00 e0       	ldi	r16, 0x00	; 0
 286:	0c bf       	out	0x3c, r16	; 60

00000288 <__do_copy_data>:
 288:	12 e0       	ldi	r17, 0x02	; 2
 28a:	a0 e0       	ldi	r26, 0x00	; 0
 28c:	b2 e0       	ldi	r27, 0x02	; 2
 28e:	e0 ef       	ldi	r30, 0xF0	; 240
 290:	ff e0       	ldi	r31, 0x0F	; 15
 292:	00 e0       	ldi	r16, 0x00	; 0
 294:	0b bf       	out	0x3b, r16	; 59
 296:	02 c0       	rjmp	.+4      	; 0x29c <__do_copy_data+0x14>
 298:	07 90       	elpm	r0, Z+
 29a:	0d 92       	st	X+, r0
 29c:	a6 30       	cpi	r26, 0x06	; 6
 29e:	b1 07       	cpc	r27, r17
 2a0:	d9 f7       	brne	.-10     	; 0x298 <__do_copy_data+0x10>

000002a2 <__do_clear_bss>:
 2a2:	12 e0       	ldi	r17, 0x02	; 2
 2a4:	a6 e0       	ldi	r26, 0x06	; 6
 2a6:	b2 e0       	ldi	r27, 0x02	; 2
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <.do_clear_bss_start>

000002aa <.do_clear_bss_loop>:
 2aa:	1d 92       	st	X+, r1

000002ac <.do_clear_bss_start>:
 2ac:	a3 32       	cpi	r26, 0x23	; 35
 2ae:	b1 07       	cpc	r27, r17
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <.do_clear_bss_loop>
 2b2:	0e 94 81 04 	call	0x902	; 0x902 <main>
 2b6:	0c 94 f6 07 	jmp	0xfec	; 0xfec <_exit>

000002ba <__bad_interrupt>:
 2ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002be <lcd_reset_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	86 e6       	ldi	r24, 0x66	; 102
 2c0:	9e e0       	ldi	r25, 0x0E	; 14
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <lcd_reset_4bit+0x4>
 2c6:	00 00       	nop
/*****Function to Reset LCD*****/
void lcd_reset_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 2c8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 2ca:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 2cc:	80 e3       	ldi	r24, 0x30	; 48
 2ce:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 2d0:	42 9a       	sbi	0x08, 2	; 8
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	9f e3       	ldi	r25, 0x3F	; 63
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_reset_4bit+0x18>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <lcd_reset_4bit+0x1e>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 2dc:	42 98       	cbi	0x08, 2	; 8
 2de:	86 e6       	ldi	r24, 0x66	; 102
 2e0:	9e e0       	ldi	r25, 0x0E	; 14
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <lcd_reset_4bit+0x24>
 2e6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 2e8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 2ea:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 2ec:	80 e3       	ldi	r24, 0x30	; 48
 2ee:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 2f0:	42 9a       	sbi	0x08, 2	; 8
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	9f e3       	ldi	r25, 0x3F	; 63
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_reset_4bit+0x38>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcd_reset_4bit+0x3e>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 2fc:	42 98       	cbi	0x08, 2	; 8
 2fe:	86 e6       	ldi	r24, 0x66	; 102
 300:	9e e0       	ldi	r25, 0x0E	; 14
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <lcd_reset_4bit+0x44>
 306:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 308:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 30a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 30c:	80 e3       	ldi	r24, 0x30	; 48
 30e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 310:	42 9a       	sbi	0x08, 2	; 8
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	9f e3       	ldi	r25, 0x3F	; 63
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <lcd_reset_4bit+0x58>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <lcd_reset_4bit+0x5e>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 31c:	42 98       	cbi	0x08, 2	; 8
 31e:	86 e6       	ldi	r24, 0x66	; 102
 320:	9e e0       	ldi	r25, 0x0E	; 14
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <lcd_reset_4bit+0x64>
 326:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 328:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 32a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 32c:	80 e2       	ldi	r24, 0x20	; 32
 32e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 330:	42 9a       	sbi	0x08, 2	; 8
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	9f e3       	ldi	r25, 0x3F	; 63
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <lcd_reset_4bit+0x78>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <lcd_reset_4bit+0x7e>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 33c:	42 98       	cbi	0x08, 2	; 8
 33e:	08 95       	ret

00000340 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 340:	98 b1       	in	r25, 0x08	; 8
 342:	9f 70       	andi	r25, 0x0F	; 15
 344:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 346:	28 b1       	in	r18, 0x08	; 8
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 348:	98 2f       	mov	r25, r24
 34a:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 34c:	92 2b       	or	r25, r18
 34e:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 350:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 352:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 354:	42 9a       	sbi	0x08, 2	; 8
 356:	ef ef       	ldi	r30, 0xFF	; 255
 358:	ff e3       	ldi	r31, 0x3F	; 63
 35a:	31 97       	sbiw	r30, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <lcd_wr_command+0x1a>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <lcd_wr_command+0x20>
	_delay_ms(5);
	cbit(lcd_port,EN);
 360:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 362:	98 b1       	in	r25, 0x08	; 8
 364:	9f 70       	andi	r25, 0x0F	; 15
 366:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 368:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 36a:	82 95       	swap	r24
 36c:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 36e:	89 2b       	or	r24, r25
 370:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 372:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 374:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 376:	42 9a       	sbi	0x08, 2	; 8
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	9f e3       	ldi	r25, 0x3F	; 63
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_wr_command+0x3c>
 380:	00 c0       	rjmp	.+0      	; 0x382 <lcd_wr_command+0x42>
	_delay_ms(5);
	cbit(lcd_port,EN);
 382:	42 98       	cbi	0x08, 2	; 8
 384:	08 95       	ret

00000386 <lcd_init>:
 386:	86 e6       	ldi	r24, 0x66	; 102
 388:	9e e0       	ldi	r25, 0x0E	; 14
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <lcd_init+0x4>
 38e:	00 00       	nop
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 390:	88 e2       	ldi	r24, 0x28	; 40
 392:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_wr_command>
	lcd_wr_command(0x01);
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_wr_command>
	lcd_wr_command(0x06);
 39c:	86 e0       	ldi	r24, 0x06	; 6
 39e:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_wr_command>
	lcd_wr_command(0x0E);
 3a2:	8e e0       	ldi	r24, 0x0E	; 14
 3a4:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_wr_command>
	lcd_wr_command(0x80);
 3a8:	80 e8       	ldi	r24, 0x80	; 128
 3aa:	0c 94 a0 01 	jmp	0x340	; 0x340 <lcd_wr_command>

000003ae <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 3ae:	98 b1       	in	r25, 0x08	; 8
 3b0:	9f 70       	andi	r25, 0x0F	; 15
 3b2:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 3b4:	28 b1       	in	r18, 0x08	; 8
/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 3b6:	98 2f       	mov	r25, r24
 3b8:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 3ba:	92 2b       	or	r25, r18
 3bc:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 3be:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 3c0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 3c2:	42 9a       	sbi	0x08, 2	; 8
 3c4:	ef ef       	ldi	r30, 0xFF	; 255
 3c6:	ff e3       	ldi	r31, 0x3F	; 63
 3c8:	31 97       	sbiw	r30, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <lcd_wr_char+0x1a>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <lcd_wr_char+0x20>
	_delay_ms(5);
	cbit(lcd_port,EN);
 3ce:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
 3d0:	82 95       	swap	r24
 3d2:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
 3d4:	98 b1       	in	r25, 0x08	; 8
 3d6:	9f 70       	andi	r25, 0x0F	; 15
 3d8:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 3da:	98 b1       	in	r25, 0x08	; 8
 3dc:	89 2b       	or	r24, r25
 3de:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 3e0:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 3e2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 3e4:	42 9a       	sbi	0x08, 2	; 8
 3e6:	8f ef       	ldi	r24, 0xFF	; 255
 3e8:	9f e3       	ldi	r25, 0x3F	; 63
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <lcd_wr_char+0x3c>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <lcd_wr_char+0x42>
	_delay_ms(5);
	cbit(lcd_port,EN);
 3f0:	42 98       	cbi	0x08, 2	; 8
 3f2:	08 95       	ret

000003f4 <lcd_home>:
}


void lcd_home()
{
	lcd_wr_command(0x80);
 3f4:	80 e8       	ldi	r24, 0x80	; 128
 3f6:	0c 94 a0 01 	jmp	0x340	; 0x340 <lcd_wr_command>

000003fa <lcd_string>:
}


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	ec 01       	movw	r28, r24
	while(*str != '\0')
 400:	89 91       	ld	r24, Y+
 402:	88 23       	and	r24, r24
 404:	19 f0       	breq	.+6      	; 0x40c <lcd_string+0x12>
	{
		lcd_wr_char(*str);
 406:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_wr_char>
 40a:	fa cf       	rjmp	.-12     	; 0x400 <lcd_string+0x6>
		str++;
	}
}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
 412:	98 2f       	mov	r25, r24
 414:	86 2f       	mov	r24, r22
	switch (row) {
 416:	92 30       	cpi	r25, 0x02	; 2
 418:	59 f0       	breq	.+22     	; 0x430 <lcd_cursor+0x1e>
 41a:	1c f4       	brge	.+6      	; 0x422 <lcd_cursor+0x10>
 41c:	91 30       	cpi	r25, 0x01	; 1
 41e:	31 f0       	breq	.+12     	; 0x42c <lcd_cursor+0x1a>
 420:	08 95       	ret
 422:	93 30       	cpi	r25, 0x03	; 3
 424:	39 f0       	breq	.+14     	; 0x434 <lcd_cursor+0x22>
 426:	94 30       	cpi	r25, 0x04	; 4
 428:	39 f0       	breq	.+14     	; 0x438 <lcd_cursor+0x26>
 42a:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
 42c:	81 58       	subi	r24, 0x81	; 129
 42e:	05 c0       	rjmp	.+10     	; 0x43a <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 430:	81 54       	subi	r24, 0x41	; 65
 432:	03 c0       	rjmp	.+6      	; 0x43a <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
 434:	8d 56       	subi	r24, 0x6D	; 109
 436:	01 c0       	rjmp	.+2      	; 0x43a <lcd_cursor+0x28>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 438:	8d 52       	subi	r24, 0x2D	; 45
 43a:	0c 94 a0 01 	jmp	0x340	; 0x340 <lcd_wr_command>

0000043e <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	8a 01       	movw	r16, r20
 448:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 44a:	88 23       	and	r24, r24
 44c:	11 f0       	breq	.+4      	; 0x452 <lcd_print+0x14>
 44e:	61 11       	cpse	r22, r1
 450:	03 c0       	rjmp	.+6      	; 0x458 <lcd_print+0x1a>
	{
		lcd_home();
 452:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <lcd_home>
 456:	02 c0       	rjmp	.+4      	; 0x45c <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 458:	0e 94 09 02 	call	0x412	; 0x412 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 45c:	c5 30       	cpi	r28, 0x05	; 5
 45e:	d1 05       	cpc	r29, r1
 460:	79 f4       	brne	.+30     	; 0x480 <lcd_print+0x42>
	{
		million=value/10000+48;
 462:	c8 01       	movw	r24, r16
 464:	60 e1       	ldi	r22, 0x10	; 16
 466:	77 e2       	ldi	r23, 0x27	; 39
 468:	0e 94 88 04 	call	0x910	; 0x910 <__udivmodhi4>
 46c:	60 5d       	subi	r22, 0xD0	; 208
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	70 93 0b 02 	sts	0x020B, r23
 474:	60 93 0a 02 	sts	0x020A, r22
		lcd_wr_char(million);
 478:	86 2f       	mov	r24, r22
 47a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_wr_char>
 47e:	03 c0       	rjmp	.+6      	; 0x486 <lcd_print+0x48>
		flag=1;
	}
	if(digits==4 || flag==1)
 480:	c4 30       	cpi	r28, 0x04	; 4
 482:	d1 05       	cpc	r29, r1
 484:	59 f5       	brne	.+86     	; 0x4dc <lcd_print+0x9e>
	{
		temp = value/1000;
 486:	c8 01       	movw	r24, r16
 488:	68 ee       	ldi	r22, 0xE8	; 232
 48a:	73 e0       	ldi	r23, 0x03	; 3
 48c:	0e 94 88 04 	call	0x910	; 0x910 <__udivmodhi4>
 490:	cb 01       	movw	r24, r22
 492:	70 93 0e 02 	sts	0x020E, r23
 496:	60 93 0d 02 	sts	0x020D, r22
		thousand = temp%10 + 48;
 49a:	6a e0       	ldi	r22, 0x0A	; 10
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	0e 94 88 04 	call	0x910	; 0x910 <__udivmodhi4>
 4a2:	c0 96       	adiw	r24, 0x30	; 48
 4a4:	90 93 22 02 	sts	0x0222, r25
 4a8:	80 93 21 02 	sts	0x0221, r24
		lcd_wr_char(thousand);
 4ac:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_wr_char>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
 4b0:	c8 01       	movw	r24, r16
 4b2:	64 e6       	ldi	r22, 0x64	; 100
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	0e 94 88 04 	call	0x910	; 0x910 <__udivmodhi4>
 4ba:	cb 01       	movw	r24, r22
 4bc:	70 93 0e 02 	sts	0x020E, r23
 4c0:	60 93 0d 02 	sts	0x020D, r22
		hundred = temp%10 + 48;
 4c4:	6a e0       	ldi	r22, 0x0A	; 10
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	0e 94 88 04 	call	0x910	; 0x910 <__udivmodhi4>
 4cc:	c0 96       	adiw	r24, 0x30	; 48
 4ce:	90 93 1d 02 	sts	0x021D, r25
 4d2:	80 93 1c 02 	sts	0x021C, r24
		lcd_wr_char(hundred);
 4d6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_wr_char>
 4da:	06 c0       	rjmp	.+12     	; 0x4e8 <lcd_print+0xaa>
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 4dc:	c3 30       	cpi	r28, 0x03	; 3
 4de:	d1 05       	cpc	r29, r1
 4e0:	39 f3       	breq	.-50     	; 0x4b0 <lcd_print+0x72>
		temp = value/100;
		hundred = temp%10 + 48;
		lcd_wr_char(hundred);
		flag=1;
	}
	if(digits==2 || flag==1)
 4e2:	c2 30       	cpi	r28, 0x02	; 2
 4e4:	d1 05       	cpc	r29, r1
 4e6:	51 f5       	brne	.+84     	; 0x53c <lcd_print+0xfe>
	{
		temp = value/10;
 4e8:	2a e0       	ldi	r18, 0x0A	; 10
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	c8 01       	movw	r24, r16
 4ee:	b9 01       	movw	r22, r18
 4f0:	0e 94 88 04 	call	0x910	; 0x910 <__udivmodhi4>
 4f4:	cb 01       	movw	r24, r22
 4f6:	70 93 0e 02 	sts	0x020E, r23
 4fa:	60 93 0d 02 	sts	0x020D, r22
		tens = temp%10 + 48;
 4fe:	b9 01       	movw	r22, r18
 500:	0e 94 88 04 	call	0x910	; 0x910 <__udivmodhi4>
 504:	c0 96       	adiw	r24, 0x30	; 48
 506:	90 93 16 02 	sts	0x0216, r25
 50a:	80 93 15 02 	sts	0x0215, r24
		lcd_wr_char(tens);
 50e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
 512:	c8 01       	movw	r24, r16
 514:	6a e0       	ldi	r22, 0x0A	; 10
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	0e 94 88 04 	call	0x910	; 0x910 <__udivmodhi4>
 51c:	c0 96       	adiw	r24, 0x30	; 48
 51e:	90 93 20 02 	sts	0x0220, r25
 522:	80 93 1f 02 	sts	0x021F, r24
		lcd_wr_char(unit);
 526:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_wr_char>
	}
	if(digits>5)
 52a:	26 97       	sbiw	r28, 0x06	; 6
 52c:	5c f0       	brlt	.+22     	; 0x544 <lcd_print+0x106>
	{
		lcd_wr_char('E');
 52e:	85 e4       	ldi	r24, 0x45	; 69
	}
	
}
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	1f 91       	pop	r17
 536:	0f 91       	pop	r16
		unit = value%10 + 48;
		lcd_wr_char(unit);
	}
	if(digits>5)
	{
		lcd_wr_char('E');
 538:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <lcd_wr_char>
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 53c:	c1 30       	cpi	r28, 0x01	; 1
 53e:	d1 05       	cpc	r29, r1
 540:	a1 f7       	brne	.-24     	; 0x52a <lcd_print+0xec>
 542:	e7 cf       	rjmp	.-50     	; 0x512 <lcd_print+0xd4>
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	08 95       	ret

0000054e <lcd_port_config>:
 * Example Call:	lcd_port_config ();
 *
 */
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //setting all the LCD pin's direction set as output
 54e:	87 b1       	in	r24, 0x07	; 7
 550:	87 6f       	ori	r24, 0xF7	; 247
 552:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; //setting all the LCD pins are set to logic 0 except PORTC 7
 554:	88 b1       	in	r24, 0x08	; 8
 556:	80 78       	andi	r24, 0x80	; 128
 558:	88 b9       	out	0x08, r24	; 8
 55a:	08 95       	ret

0000055c <adc_pin_config>:
 *
 */

 void adc_pin_config (void)
{
 DDRF = 0x00; //set PORTF direction as input
 55c:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00; //set PORTF pins floating
 55e:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00; //set PORTK direction as input
 560:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00; //set PORTK pins floating
 564:	10 92 08 01 	sts	0x0108, r1
 568:	08 95       	ret

0000056a <buzzer_pin_config>:
}

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 56a:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 56c:	43 98       	cbi	0x08, 3	; 8
 56e:	08 95       	ret

00000570 <motion_pin_config>:
 * Logic:		Enables the DDRA register and setting pins of PORTA and enables the DDRL Register
 * Example Call:	motion_pin_config ()
 */
void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
 570:	81 b1       	in	r24, 0x01	; 1
 572:	8f 60       	ori	r24, 0x0F	; 15
 574:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
 576:	82 b1       	in	r24, 0x02	; 2
 578:	80 7f       	andi	r24, 0xF0	; 240
 57a:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 57c:	ea e0       	ldi	r30, 0x0A	; 10
 57e:	f1 e0       	ldi	r31, 0x01	; 1
 580:	80 81       	ld	r24, Z
 582:	88 61       	ori	r24, 0x18	; 24
 584:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 586:	eb e0       	ldi	r30, 0x0B	; 11
 588:	f1 e0       	ldi	r31, 0x01	; 1
 58a:	80 81       	ld	r24, Z
 58c:	88 61       	ori	r24, 0x18	; 24
 58e:	80 83       	st	Z, r24
 590:	08 95       	ret

00000592 <timer5_init>:
 * Logic:		Commented below
 * Example Call:	timer5_init()
 */
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
 592:	e1 e2       	ldi	r30, 0x21	; 33
 594:	f1 e0       	ldi	r31, 0x01	; 1
 596:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 59e:	91 e0       	ldi	r25, 0x01	; 1
 5a0:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 5a4:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 5a8:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 5ac:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 5b0:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 5b4:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 5b8:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 5bc:	89 ea       	ldi	r24, 0xA9	; 169
 5be:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 5c2:	8b e0       	ldi	r24, 0x0B	; 11
 5c4:	80 83       	st	Z, r24
 5c6:	08 95       	ret

000005c8 <velocity>:
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 5c8:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 5cc:	60 93 2a 01 	sts	0x012A, r22
 5d0:	08 95       	ret

000005d2 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
 5d2:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
 5d4:	90 7f       	andi	r25, 0xF0	; 240
 */
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 5d6:	8f 70       	andi	r24, 0x0F	; 15
 PortARestore = PORTA; 			// reading the PORTA's original status
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 5d8:	89 2b       	or	r24, r25
 PORTA = PortARestore; 			// setting the command to the port
 5da:	82 b9       	out	0x02, r24	; 2
 5dc:	08 95       	ret

000005de <spot_left>:
 * Logic:		sets pins of PORTA for forward movement
 * Example Call:	forward()
 */
 void spot_left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
 5de:	85 e0       	ldi	r24, 0x05	; 5
 5e0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <motion_set>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 5ea:	80 93 2a 01 	sts	0x012A, r24
 5ee:	08 95       	ret

000005f0 <spot_right>:
  velocity(255,255);
}

void spot_right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
 5f0:	8a e0       	ldi	r24, 0x0A	; 10
 5f2:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <motion_set>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 5f6:	8f ef       	ldi	r24, 0xFF	; 255
 5f8:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 5fc:	80 93 2a 01 	sts	0x012A, r24
 600:	08 95       	ret

00000602 <forward>:
  velocity(255,255);
}

void forward (void) //both wheels forward
{
  motion_set(0x06);
 602:	86 e0       	ldi	r24, 0x06	; 6
 604:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <motion_set>

00000608 <stop>:
 * Logic:		sets pins of PORTA for to stop the robot
 * Example Call:	stop()
 */
void stop (void)
{
  motion_set(0x00);
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <motion_set>

0000060e <left>:
 * Logic:		sets pins of PORTA for to turn the robot left and sets the velocity of the wheel
 * Example Call:	left()
 */
void left (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x04);
 60e:	84 e0       	ldi	r24, 0x04	; 4
 610:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <motion_set>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 614:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
 618:	88 ec       	ldi	r24, 0xC8	; 200
 61a:	80 93 2a 01 	sts	0x012A, r24
 61e:	08 95       	ret

00000620 <left_back>:
 velocity(0,200);
}

void left_back (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <motion_set>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 626:	88 ec       	ldi	r24, 0xC8	; 200
 628:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 62c:	10 92 2a 01 	sts	0x012A, r1
 630:	08 95       	ret

00000632 <right>:
 * Logic:		sets pins of PORTA for to turn the robot right and sets the velocity of the wheel
 * Example Call:	right()
 */
void right (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x02);
 632:	82 e0       	ldi	r24, 0x02	; 2
 634:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <motion_set>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 638:	88 ec       	ldi	r24, 0xC8	; 200
 63a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 63e:	10 92 2a 01 	sts	0x012A, r1
 642:	08 95       	ret

00000644 <right_back>:
 velocity(200,0);
}

void right_back (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
 644:	88 e0       	ldi	r24, 0x08	; 8
 646:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <motion_set>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 64a:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
 64e:	88 ec       	ldi	r24, 0xC8	; 200
 650:	80 93 2a 01 	sts	0x012A, r24
 654:	08 95       	ret

00000656 <back>:
 velocity(0,200);
}

void back (void) //both wheels backward
{
	motion_set(0x09);
 656:	89 e0       	ldi	r24, 0x09	; 9
 658:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <motion_set>
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 662:	80 93 2a 01 	sts	0x012A, r24
 666:	08 95       	ret

00000668 <port_init>:
 * Logic:		calls the pin config functions
 * Example Call:	port_init()
 */
void port_init()
{
	motion_pin_config();
 668:	0e 94 b8 02 	call	0x570	; 0x570 <motion_pin_config>
	buzzer_pin_config();
 66c:	0e 94 b5 02 	call	0x56a	; 0x56a <buzzer_pin_config>
	lcd_port_config();//lcd pin configuration
 670:	0e 94 a7 02 	call	0x54e	; 0x54e <lcd_port_config>
    adc_pin_config();
 674:	0c 94 ae 02 	jmp	0x55c	; 0x55c <adc_pin_config>

00000678 <adc_init>:
}

void adc_init()
{
	ADCSRA = 0x00;
 678:	ea e7       	ldi	r30, 0x7A	; 122
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 67e:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 682:	80 e2       	ldi	r24, 0x20	; 32
 684:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
 688:	80 e8       	ldi	r24, 0x80	; 128
 68a:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 68c:	86 e8       	ldi	r24, 0x86	; 134
 68e:	80 83       	st	Z, r24
 690:	08 95       	ret

00000692 <ADC_Conversion>:
}

unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
 692:	88 30       	cpi	r24, 0x08	; 8
 694:	18 f0       	brcs	.+6      	; 0x69c <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
 696:	98 e0       	ldi	r25, 0x08	; 8
 698:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
 69c:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
 69e:	80 62       	ori	r24, 0x20	; 32
 6a0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 6a4:	80 91 7a 00 	lds	r24, 0x007A
 6a8:	80 64       	ori	r24, 0x40	; 64
 6aa:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
 6ae:	80 91 7a 00 	lds	r24, 0x007A
 6b2:	84 ff       	sbrs	r24, 4
 6b4:	fc cf       	rjmp	.-8      	; 0x6ae <ADC_Conversion+0x1c>
	a=ADCH;
 6b6:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 6ba:	90 91 7a 00 	lds	r25, 0x007A
 6be:	90 61       	ori	r25, 0x10	; 16
 6c0:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
 6c4:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 6c8:	08 95       	ret

000006ca <buzzer_on>:
 * Example Call:	buzzer_on()
 */
void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
 6ca:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
 6cc:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
 6ce:	88 b9       	out	0x08, r24	; 8
 6d0:	08 95       	ret

000006d2 <buzzer_off>:
 * Example Call:	buzzer_off()
 */
void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
 6d2:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
 6d4:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
 6d6:	88 b9       	out	0x08, r24	; 8
 6d8:	08 95       	ret

000006da <Sharp_GP2D12_estimation>:

unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
 6da:	68 2f       	mov	r22, r24
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatunsisf>
 6e6:	2f ee       	ldi	r18, 0xEF	; 239
 6e8:	39 ec       	ldi	r19, 0xC9	; 201
 6ea:	43 e9       	ldi	r20, 0x93	; 147
 6ec:	5f e3       	ldi	r21, 0x3F	; 63
 6ee:	0e 94 2c 06 	call	0xc58	; 0xc58 <pow>
 6f2:	9b 01       	movw	r18, r22
 6f4:	ac 01       	movw	r20, r24
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	80 e8       	ldi	r24, 0x80	; 128
 6fc:	9f e3       	ldi	r25, 0x3F	; 63
 6fe:	0e 94 a2 04 	call	0x944	; 0x944 <__divsf3>
 702:	2a e9       	ldi	r18, 0x9A	; 154
 704:	39 ef       	ldi	r19, 0xF9	; 249
 706:	4e e2       	ldi	r20, 0x2E	; 46
 708:	55 e4       	ldi	r21, 0x45	; 69
 70a:	0e 94 c9 05 	call	0xb92	; 0xb92 <__mulsf3>
 70e:	20 e0       	ldi	r18, 0x00	; 0
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	40 e2       	ldi	r20, 0x20	; 32
 714:	51 e4       	ldi	r21, 0x41	; 65
 716:	0e 94 c9 05 	call	0xb92	; 0xb92 <__mulsf3>
 71a:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fixsfsi>
 71e:	cb 01       	movw	r24, r22
 720:	61 32       	cpi	r22, 0x21	; 33
 722:	23 e0       	ldi	r18, 0x03	; 3
 724:	72 07       	cpc	r23, r18
 726:	10 f0       	brcs	.+4      	; 0x72c <Sharp_GP2D12_estimation+0x52>
 728:	80 e2       	ldi	r24, 0x20	; 32
 72a:	93 e0       	ldi	r25, 0x03	; 3
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
}
 72c:	08 95       	ret

0000072e <uart0_init>:
 * Logic:		No logic
 * Example Call:	uart2_init()
 */
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
 72e:	e1 ec       	ldi	r30, 0xC1	; 193
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	10 82       	st	Z, r1
 UCSR0A = 0x00;
 734:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
 738:	86 e0       	ldi	r24, 0x06	; 6
 73a:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x5F; //set baud rate lo
 73e:	8f e5       	ldi	r24, 0x5F	; 95
 740:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate hi
 744:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
 748:	88 e9       	ldi	r24, 0x98	; 152
 74a:	80 83       	st	Z, r24
 74c:	08 95       	ret

0000074e <__vector_25>:
 * Output: 		sets the velocity of the wheels
 * Logic:		It stores data from UDR2 in a variable and using switch cases it sets the desired velocity
 * Example Call:	No call as it is an interrupt
 */
SIGNAL(USART0_RX_vect) 		// ISR for receive complete interrupt
{
 74e:	1f 92       	push	r1
 750:	0f 92       	push	r0
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	0f 92       	push	r0
 756:	11 24       	eor	r1, r1
 758:	0b b6       	in	r0, 0x3b	; 59
 75a:	0f 92       	push	r0
 75c:	2f 93       	push	r18
 75e:	3f 93       	push	r19
 760:	4f 93       	push	r20
 762:	5f 93       	push	r21
 764:	6f 93       	push	r22
 766:	7f 93       	push	r23
 768:	8f 93       	push	r24
 76a:	9f 93       	push	r25
 76c:	af 93       	push	r26
 76e:	bf 93       	push	r27
 770:	ef 93       	push	r30
 772:	ff 93       	push	r31
	data = UDR0; 				//making copy of data from UDR2 in 'data' variable
 774:	80 91 c6 00 	lds	r24, 0x00C6
 778:	80 93 17 02 	sts	0x0217, r24


	switch(data)
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	81 35       	cpi	r24, 0x51	; 81
 780:	91 05       	cpc	r25, r1
 782:	08 f0       	brcs	.+2      	; 0x786 <__vector_25+0x38>
 784:	82 c0       	rjmp	.+260    	; 0x88a <__vector_25+0x13c>
 786:	fc 01       	movw	r30, r24
 788:	ee 58       	subi	r30, 0x8E	; 142
 78a:	ff 4f       	sbci	r31, 0xFF	; 255
 78c:	0c 94 9c 04 	jmp	0x938	; 0x938 <__tablejump2__>
	{
        case 0x00: x = 255; y = 255; break;
        case 0x01: x = 200; y = 255; break;
 790:	88 ec       	ldi	r24, 0xC8	; 200
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	90 93 05 02 	sts	0x0205, r25
 798:	80 93 04 02 	sts	0x0204, r24
 79c:	8f ef       	ldi	r24, 0xFF	; 255
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	90 93 03 02 	sts	0x0203, r25
 7a4:	80 93 02 02 	sts	0x0202, r24
 7a8:	70 c0       	rjmp	.+224    	; 0x88a <__vector_25+0x13c>
        case 0x02: x = 150; y = 255; break;
 7aa:	86 e9       	ldi	r24, 0x96	; 150
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	f2 cf       	rjmp	.-28     	; 0x794 <__vector_25+0x46>
        case 0x03: x = 100; y = 255; break;
 7b0:	84 e6       	ldi	r24, 0x64	; 100
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	ef cf       	rjmp	.-34     	; 0x794 <__vector_25+0x46>
        case 0x04: x = 50;  y = 255; break;
 7b6:	82 e3       	ldi	r24, 0x32	; 50
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	ec cf       	rjmp	.-40     	; 0x794 <__vector_25+0x46>
        case 0x10: x = 255; y = 200; break;
 7bc:	8f ef       	ldi	r24, 0xFF	; 255
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	0b c0       	rjmp	.+22     	; 0x7d8 <__vector_25+0x8a>
        case 0x11: x = 200; y = 200; break;
 7c2:	88 ec       	ldi	r24, 0xC8	; 200
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	2c c0       	rjmp	.+88     	; 0x820 <__vector_25+0xd2>
        case 0x12: x = 150; y = 200; break;
 7c8:	86 e9       	ldi	r24, 0x96	; 150
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <__vector_25+0x8a>
        case 0x13: x = 100; y = 200; break;
 7ce:	84 e6       	ldi	r24, 0x64	; 100
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <__vector_25+0x8a>
        case 0x14: x = 50;  y = 200; break;
 7d4:	82 e3       	ldi	r24, 0x32	; 50
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	90 93 05 02 	sts	0x0205, r25
 7dc:	80 93 04 02 	sts	0x0204, r24
 7e0:	88 ec       	ldi	r24, 0xC8	; 200
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	dd cf       	rjmp	.-70     	; 0x7a0 <__vector_25+0x52>
        case 0x20: x = 255; y = 150; break;
 7e6:	8f ef       	ldi	r24, 0xFF	; 255
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	21 c0       	rjmp	.+66     	; 0x82e <__vector_25+0xe0>
        case 0x21: x = 200; y = 150; break;
 7ec:	88 ec       	ldi	r24, 0xC8	; 200
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	1e c0       	rjmp	.+60     	; 0x82e <__vector_25+0xe0>
        case 0x22: x = 150; y = 150; break;
 7f2:	86 e9       	ldi	r24, 0x96	; 150
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	14 c0       	rjmp	.+40     	; 0x820 <__vector_25+0xd2>
        case 0x23: x = 100; y = 150; break;
 7f8:	84 e6       	ldi	r24, 0x64	; 100
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	18 c0       	rjmp	.+48     	; 0x82e <__vector_25+0xe0>
        case 0x24: x = 50;  y = 150; break;
        case 0x30: x = 255; y = 100; break;
 7fe:	8f ef       	ldi	r24, 0xFF	; 255
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	05 c0       	rjmp	.+10     	; 0x80e <__vector_25+0xc0>
        case 0x31: x = 200; y = 100; break;
 804:	88 ec       	ldi	r24, 0xC8	; 200
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	02 c0       	rjmp	.+4      	; 0x80e <__vector_25+0xc0>
        case 0x32: x = 150; y = 100; break;
 80a:	86 e9       	ldi	r24, 0x96	; 150
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	90 93 05 02 	sts	0x0205, r25
 812:	80 93 04 02 	sts	0x0204, r24
 816:	84 e6       	ldi	r24, 0x64	; 100
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	c2 cf       	rjmp	.-124    	; 0x7a0 <__vector_25+0x52>
        case 0x33: x = 255; y = 255; break;
 81c:	8f ef       	ldi	r24, 0xFF	; 255
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	90 93 05 02 	sts	0x0205, r25
 824:	80 93 04 02 	sts	0x0204, r24
 828:	bb cf       	rjmp	.-138    	; 0x7a0 <__vector_25+0x52>
        case 0x34: x = 50;  y = 150; break;
 82a:	82 e3       	ldi	r24, 0x32	; 50
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	90 93 05 02 	sts	0x0205, r25
 832:	80 93 04 02 	sts	0x0204, r24
 836:	86 e9       	ldi	r24, 0x96	; 150
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	b2 cf       	rjmp	.-156    	; 0x7a0 <__vector_25+0x52>
        case 0x40: x = 255; y = 50;  break;
 83c:	8f ef       	ldi	r24, 0xFF	; 255
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	05 c0       	rjmp	.+10     	; 0x84c <__vector_25+0xfe>
        case 0x41: x = 200; y = 50;  break;
 842:	88 ec       	ldi	r24, 0xC8	; 200
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	02 c0       	rjmp	.+4      	; 0x84c <__vector_25+0xfe>
        case 0x42: x = 150; y = 50;  break;
        case 0x43: x = 150; y = 50;  break;
 848:	86 e9       	ldi	r24, 0x96	; 150
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	90 93 05 02 	sts	0x0205, r25
 850:	80 93 04 02 	sts	0x0204, r24
 854:	82 e3       	ldi	r24, 0x32	; 50
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	a3 cf       	rjmp	.-186    	; 0x7a0 <__vector_25+0x52>
        case 0x44: right();          return;
 85a:	0e 94 19 03 	call	0x632	; 0x632 <right>
 85e:	33 c0       	rjmp	.+102    	; 0x8c6 <__vector_25+0x178>
        case 0x45: left();           return;
 860:	0e 94 07 03 	call	0x60e	; 0x60e <left>
 864:	30 c0       	rjmp	.+96     	; 0x8c6 <__vector_25+0x178>
        case 0x37: buzzer_on();      return;
 866:	0e 94 65 03 	call	0x6ca	; 0x6ca <buzzer_on>
 86a:	2d c0       	rjmp	.+90     	; 0x8c6 <__vector_25+0x178>
        case 0x39: buzzer_off();     return;
 86c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <buzzer_off>
 870:	2a c0       	rjmp	.+84     	; 0x8c6 <__vector_25+0x178>
        case 0x35: x = 0;   y = 0;   break;
 872:	10 92 05 02 	sts	0x0205, r1
 876:	10 92 04 02 	sts	0x0204, r1
 87a:	10 92 03 02 	sts	0x0203, r1
 87e:	10 92 02 02 	sts	0x0202, r1
 882:	03 c0       	rjmp	.+6      	; 0x88a <__vector_25+0x13c>
        case 0x50: back();           return;
 884:	0e 94 2b 03 	call	0x656	; 0x656 <back>
 888:	1e c0       	rjmp	.+60     	; 0x8c6 <__vector_25+0x178>
	}

        forward();
 88a:	0e 94 01 03 	call	0x602	; 0x602 <forward>
        velocity(x,y);
 88e:	80 91 02 02 	lds	r24, 0x0202
 892:	90 91 04 02 	lds	r25, 0x0204
 * Logic:		Assignment of char value to the pin
 * Example Call:	velocity(200,200)
 */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 896:	90 93 28 01 	sts	0x0128, r25
	OCR5BL = (unsigned char)right_motor;
 89a:	80 93 2a 01 	sts	0x012A, r24
        case 0x50: back();           return;
	}

        forward();
        velocity(x,y);
        lcd_print(1,1,x,3);
 89e:	40 91 04 02 	lds	r20, 0x0204
 8a2:	50 91 05 02 	lds	r21, 0x0205
 8a6:	23 e0       	ldi	r18, 0x03	; 3
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	61 e0       	ldi	r22, 0x01	; 1
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_print>
        lcd_print(2,1,y,3);
 8b2:	40 91 02 02 	lds	r20, 0x0202
 8b6:	50 91 03 02 	lds	r21, 0x0203
 8ba:	23 e0       	ldi	r18, 0x03	; 3
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	61 e0       	ldi	r22, 0x01	; 1
 8c0:	82 e0       	ldi	r24, 0x02	; 2
 8c2:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_print>

}
 8c6:	ff 91       	pop	r31
 8c8:	ef 91       	pop	r30
 8ca:	bf 91       	pop	r27
 8cc:	af 91       	pop	r26
 8ce:	9f 91       	pop	r25
 8d0:	8f 91       	pop	r24
 8d2:	7f 91       	pop	r23
 8d4:	6f 91       	pop	r22
 8d6:	5f 91       	pop	r21
 8d8:	4f 91       	pop	r20
 8da:	3f 91       	pop	r19
 8dc:	2f 91       	pop	r18
 8de:	0f 90       	pop	r0
 8e0:	0b be       	out	0x3b, r0	; 59
 8e2:	0f 90       	pop	r0
 8e4:	0f be       	out	0x3f, r0	; 63
 8e6:	0f 90       	pop	r0
 8e8:	1f 90       	pop	r1
 8ea:	18 95       	reti

000008ec <init_devices>:
 * Logic:		None
 * Example Call:	init_devices()
 */
void init_devices()
{
 cli(); //Clears the global interrupts
 8ec:	f8 94       	cli
 port_init();  //Initializes all the ports
 8ee:	0e 94 34 03 	call	0x668	; 0x668 <port_init>
 uart0_init(); //Initailize UART1 for serial communiaction
 8f2:	0e 94 97 03 	call	0x72e	; 0x72e <uart0_init>
 timer5_init();
 8f6:	0e 94 c9 02 	call	0x592	; 0x592 <timer5_init>
 adc_init();
 8fa:	0e 94 3c 03 	call	0x678	; 0x678 <adc_init>
 sei();   //Enables the global interrupts
 8fe:	78 94       	sei
 900:	08 95       	ret

00000902 <main>:
 902:	0e 94 76 04 	call	0x8ec	; 0x8ec <init_devices>
 906:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_reset_4bit>
 90a:	0e 94 c3 01 	call	0x386	; 0x386 <lcd_init>
 90e:	ff cf       	rjmp	.-2      	; 0x90e <main+0xc>

00000910 <__udivmodhi4>:
 910:	aa 1b       	sub	r26, r26
 912:	bb 1b       	sub	r27, r27
 914:	51 e1       	ldi	r21, 0x11	; 17
 916:	07 c0       	rjmp	.+14     	; 0x926 <__udivmodhi4_ep>

00000918 <__udivmodhi4_loop>:
 918:	aa 1f       	adc	r26, r26
 91a:	bb 1f       	adc	r27, r27
 91c:	a6 17       	cp	r26, r22
 91e:	b7 07       	cpc	r27, r23
 920:	10 f0       	brcs	.+4      	; 0x926 <__udivmodhi4_ep>
 922:	a6 1b       	sub	r26, r22
 924:	b7 0b       	sbc	r27, r23

00000926 <__udivmodhi4_ep>:
 926:	88 1f       	adc	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	5a 95       	dec	r21
 92c:	a9 f7       	brne	.-22     	; 0x918 <__udivmodhi4_loop>
 92e:	80 95       	com	r24
 930:	90 95       	com	r25
 932:	bc 01       	movw	r22, r24
 934:	cd 01       	movw	r24, r26
 936:	08 95       	ret

00000938 <__tablejump2__>:
 938:	ee 0f       	add	r30, r30
 93a:	ff 1f       	adc	r31, r31

0000093c <__tablejump__>:
 93c:	05 90       	lpm	r0, Z+
 93e:	f4 91       	lpm	r31, Z
 940:	e0 2d       	mov	r30, r0
 942:	19 94       	eijmp

00000944 <__divsf3>:
 944:	0c d0       	rcall	.+24     	; 0x95e <__divsf3x>
 946:	eb c0       	rjmp	.+470    	; 0xb1e <__fp_round>
 948:	e3 d0       	rcall	.+454    	; 0xb10 <__fp_pscB>
 94a:	40 f0       	brcs	.+16     	; 0x95c <__divsf3+0x18>
 94c:	da d0       	rcall	.+436    	; 0xb02 <__fp_pscA>
 94e:	30 f0       	brcs	.+12     	; 0x95c <__divsf3+0x18>
 950:	21 f4       	brne	.+8      	; 0x95a <__divsf3+0x16>
 952:	5f 3f       	cpi	r21, 0xFF	; 255
 954:	19 f0       	breq	.+6      	; 0x95c <__divsf3+0x18>
 956:	cc c0       	rjmp	.+408    	; 0xaf0 <__fp_inf>
 958:	51 11       	cpse	r21, r1
 95a:	15 c1       	rjmp	.+554    	; 0xb86 <__fp_szero>
 95c:	cf c0       	rjmp	.+414    	; 0xafc <__fp_nan>

0000095e <__divsf3x>:
 95e:	f0 d0       	rcall	.+480    	; 0xb40 <__fp_split3>
 960:	98 f3       	brcs	.-26     	; 0x948 <__divsf3+0x4>

00000962 <__divsf3_pse>:
 962:	99 23       	and	r25, r25
 964:	c9 f3       	breq	.-14     	; 0x958 <__divsf3+0x14>
 966:	55 23       	and	r21, r21
 968:	b1 f3       	breq	.-20     	; 0x956 <__divsf3+0x12>
 96a:	95 1b       	sub	r25, r21
 96c:	55 0b       	sbc	r21, r21
 96e:	bb 27       	eor	r27, r27
 970:	aa 27       	eor	r26, r26
 972:	62 17       	cp	r22, r18
 974:	73 07       	cpc	r23, r19
 976:	84 07       	cpc	r24, r20
 978:	38 f0       	brcs	.+14     	; 0x988 <__divsf3_pse+0x26>
 97a:	9f 5f       	subi	r25, 0xFF	; 255
 97c:	5f 4f       	sbci	r21, 0xFF	; 255
 97e:	22 0f       	add	r18, r18
 980:	33 1f       	adc	r19, r19
 982:	44 1f       	adc	r20, r20
 984:	aa 1f       	adc	r26, r26
 986:	a9 f3       	breq	.-22     	; 0x972 <__divsf3_pse+0x10>
 988:	33 d0       	rcall	.+102    	; 0x9f0 <__divsf3_pse+0x8e>
 98a:	0e 2e       	mov	r0, r30
 98c:	3a f0       	brmi	.+14     	; 0x99c <__divsf3_pse+0x3a>
 98e:	e0 e8       	ldi	r30, 0x80	; 128
 990:	30 d0       	rcall	.+96     	; 0x9f2 <__divsf3_pse+0x90>
 992:	91 50       	subi	r25, 0x01	; 1
 994:	50 40       	sbci	r21, 0x00	; 0
 996:	e6 95       	lsr	r30
 998:	00 1c       	adc	r0, r0
 99a:	ca f7       	brpl	.-14     	; 0x98e <__divsf3_pse+0x2c>
 99c:	29 d0       	rcall	.+82     	; 0x9f0 <__divsf3_pse+0x8e>
 99e:	fe 2f       	mov	r31, r30
 9a0:	27 d0       	rcall	.+78     	; 0x9f0 <__divsf3_pse+0x8e>
 9a2:	66 0f       	add	r22, r22
 9a4:	77 1f       	adc	r23, r23
 9a6:	88 1f       	adc	r24, r24
 9a8:	bb 1f       	adc	r27, r27
 9aa:	26 17       	cp	r18, r22
 9ac:	37 07       	cpc	r19, r23
 9ae:	48 07       	cpc	r20, r24
 9b0:	ab 07       	cpc	r26, r27
 9b2:	b0 e8       	ldi	r27, 0x80	; 128
 9b4:	09 f0       	breq	.+2      	; 0x9b8 <__divsf3_pse+0x56>
 9b6:	bb 0b       	sbc	r27, r27
 9b8:	80 2d       	mov	r24, r0
 9ba:	bf 01       	movw	r22, r30
 9bc:	ff 27       	eor	r31, r31
 9be:	93 58       	subi	r25, 0x83	; 131
 9c0:	5f 4f       	sbci	r21, 0xFF	; 255
 9c2:	2a f0       	brmi	.+10     	; 0x9ce <__divsf3_pse+0x6c>
 9c4:	9e 3f       	cpi	r25, 0xFE	; 254
 9c6:	51 05       	cpc	r21, r1
 9c8:	68 f0       	brcs	.+26     	; 0x9e4 <__divsf3_pse+0x82>
 9ca:	92 c0       	rjmp	.+292    	; 0xaf0 <__fp_inf>
 9cc:	dc c0       	rjmp	.+440    	; 0xb86 <__fp_szero>
 9ce:	5f 3f       	cpi	r21, 0xFF	; 255
 9d0:	ec f3       	brlt	.-6      	; 0x9cc <__divsf3_pse+0x6a>
 9d2:	98 3e       	cpi	r25, 0xE8	; 232
 9d4:	dc f3       	brlt	.-10     	; 0x9cc <__divsf3_pse+0x6a>
 9d6:	86 95       	lsr	r24
 9d8:	77 95       	ror	r23
 9da:	67 95       	ror	r22
 9dc:	b7 95       	ror	r27
 9de:	f7 95       	ror	r31
 9e0:	9f 5f       	subi	r25, 0xFF	; 255
 9e2:	c9 f7       	brne	.-14     	; 0x9d6 <__divsf3_pse+0x74>
 9e4:	88 0f       	add	r24, r24
 9e6:	91 1d       	adc	r25, r1
 9e8:	96 95       	lsr	r25
 9ea:	87 95       	ror	r24
 9ec:	97 f9       	bld	r25, 7
 9ee:	08 95       	ret
 9f0:	e1 e0       	ldi	r30, 0x01	; 1
 9f2:	66 0f       	add	r22, r22
 9f4:	77 1f       	adc	r23, r23
 9f6:	88 1f       	adc	r24, r24
 9f8:	bb 1f       	adc	r27, r27
 9fa:	62 17       	cp	r22, r18
 9fc:	73 07       	cpc	r23, r19
 9fe:	84 07       	cpc	r24, r20
 a00:	ba 07       	cpc	r27, r26
 a02:	20 f0       	brcs	.+8      	; 0xa0c <__divsf3_pse+0xaa>
 a04:	62 1b       	sub	r22, r18
 a06:	73 0b       	sbc	r23, r19
 a08:	84 0b       	sbc	r24, r20
 a0a:	ba 0b       	sbc	r27, r26
 a0c:	ee 1f       	adc	r30, r30
 a0e:	88 f7       	brcc	.-30     	; 0x9f2 <__divsf3_pse+0x90>
 a10:	e0 95       	com	r30
 a12:	08 95       	ret

00000a14 <__fixsfsi>:
 a14:	04 d0       	rcall	.+8      	; 0xa1e <__fixunssfsi>
 a16:	68 94       	set
 a18:	b1 11       	cpse	r27, r1
 a1a:	b5 c0       	rjmp	.+362    	; 0xb86 <__fp_szero>
 a1c:	08 95       	ret

00000a1e <__fixunssfsi>:
 a1e:	98 d0       	rcall	.+304    	; 0xb50 <__fp_splitA>
 a20:	88 f0       	brcs	.+34     	; 0xa44 <__fixunssfsi+0x26>
 a22:	9f 57       	subi	r25, 0x7F	; 127
 a24:	90 f0       	brcs	.+36     	; 0xa4a <__fixunssfsi+0x2c>
 a26:	b9 2f       	mov	r27, r25
 a28:	99 27       	eor	r25, r25
 a2a:	b7 51       	subi	r27, 0x17	; 23
 a2c:	a0 f0       	brcs	.+40     	; 0xa56 <__fixunssfsi+0x38>
 a2e:	d1 f0       	breq	.+52     	; 0xa64 <__fixunssfsi+0x46>
 a30:	66 0f       	add	r22, r22
 a32:	77 1f       	adc	r23, r23
 a34:	88 1f       	adc	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	1a f0       	brmi	.+6      	; 0xa40 <__fixunssfsi+0x22>
 a3a:	ba 95       	dec	r27
 a3c:	c9 f7       	brne	.-14     	; 0xa30 <__fixunssfsi+0x12>
 a3e:	12 c0       	rjmp	.+36     	; 0xa64 <__fixunssfsi+0x46>
 a40:	b1 30       	cpi	r27, 0x01	; 1
 a42:	81 f0       	breq	.+32     	; 0xa64 <__fixunssfsi+0x46>
 a44:	9f d0       	rcall	.+318    	; 0xb84 <__fp_zero>
 a46:	b1 e0       	ldi	r27, 0x01	; 1
 a48:	08 95       	ret
 a4a:	9c c0       	rjmp	.+312    	; 0xb84 <__fp_zero>
 a4c:	67 2f       	mov	r22, r23
 a4e:	78 2f       	mov	r23, r24
 a50:	88 27       	eor	r24, r24
 a52:	b8 5f       	subi	r27, 0xF8	; 248
 a54:	39 f0       	breq	.+14     	; 0xa64 <__fixunssfsi+0x46>
 a56:	b9 3f       	cpi	r27, 0xF9	; 249
 a58:	cc f3       	brlt	.-14     	; 0xa4c <__fixunssfsi+0x2e>
 a5a:	86 95       	lsr	r24
 a5c:	77 95       	ror	r23
 a5e:	67 95       	ror	r22
 a60:	b3 95       	inc	r27
 a62:	d9 f7       	brne	.-10     	; 0xa5a <__fixunssfsi+0x3c>
 a64:	3e f4       	brtc	.+14     	; 0xa74 <__fixunssfsi+0x56>
 a66:	90 95       	com	r25
 a68:	80 95       	com	r24
 a6a:	70 95       	com	r23
 a6c:	61 95       	neg	r22
 a6e:	7f 4f       	sbci	r23, 0xFF	; 255
 a70:	8f 4f       	sbci	r24, 0xFF	; 255
 a72:	9f 4f       	sbci	r25, 0xFF	; 255
 a74:	08 95       	ret

00000a76 <__floatunsisf>:
 a76:	e8 94       	clt
 a78:	09 c0       	rjmp	.+18     	; 0xa8c <__floatsisf+0x12>

00000a7a <__floatsisf>:
 a7a:	97 fb       	bst	r25, 7
 a7c:	3e f4       	brtc	.+14     	; 0xa8c <__floatsisf+0x12>
 a7e:	90 95       	com	r25
 a80:	80 95       	com	r24
 a82:	70 95       	com	r23
 a84:	61 95       	neg	r22
 a86:	7f 4f       	sbci	r23, 0xFF	; 255
 a88:	8f 4f       	sbci	r24, 0xFF	; 255
 a8a:	9f 4f       	sbci	r25, 0xFF	; 255
 a8c:	99 23       	and	r25, r25
 a8e:	a9 f0       	breq	.+42     	; 0xaba <__floatsisf+0x40>
 a90:	f9 2f       	mov	r31, r25
 a92:	96 e9       	ldi	r25, 0x96	; 150
 a94:	bb 27       	eor	r27, r27
 a96:	93 95       	inc	r25
 a98:	f6 95       	lsr	r31
 a9a:	87 95       	ror	r24
 a9c:	77 95       	ror	r23
 a9e:	67 95       	ror	r22
 aa0:	b7 95       	ror	r27
 aa2:	f1 11       	cpse	r31, r1
 aa4:	f8 cf       	rjmp	.-16     	; 0xa96 <__floatsisf+0x1c>
 aa6:	fa f4       	brpl	.+62     	; 0xae6 <__floatsisf+0x6c>
 aa8:	bb 0f       	add	r27, r27
 aaa:	11 f4       	brne	.+4      	; 0xab0 <__floatsisf+0x36>
 aac:	60 ff       	sbrs	r22, 0
 aae:	1b c0       	rjmp	.+54     	; 0xae6 <__floatsisf+0x6c>
 ab0:	6f 5f       	subi	r22, 0xFF	; 255
 ab2:	7f 4f       	sbci	r23, 0xFF	; 255
 ab4:	8f 4f       	sbci	r24, 0xFF	; 255
 ab6:	9f 4f       	sbci	r25, 0xFF	; 255
 ab8:	16 c0       	rjmp	.+44     	; 0xae6 <__floatsisf+0x6c>
 aba:	88 23       	and	r24, r24
 abc:	11 f0       	breq	.+4      	; 0xac2 <__floatsisf+0x48>
 abe:	96 e9       	ldi	r25, 0x96	; 150
 ac0:	11 c0       	rjmp	.+34     	; 0xae4 <__floatsisf+0x6a>
 ac2:	77 23       	and	r23, r23
 ac4:	21 f0       	breq	.+8      	; 0xace <__floatsisf+0x54>
 ac6:	9e e8       	ldi	r25, 0x8E	; 142
 ac8:	87 2f       	mov	r24, r23
 aca:	76 2f       	mov	r23, r22
 acc:	05 c0       	rjmp	.+10     	; 0xad8 <__floatsisf+0x5e>
 ace:	66 23       	and	r22, r22
 ad0:	71 f0       	breq	.+28     	; 0xaee <__floatsisf+0x74>
 ad2:	96 e8       	ldi	r25, 0x86	; 134
 ad4:	86 2f       	mov	r24, r22
 ad6:	70 e0       	ldi	r23, 0x00	; 0
 ad8:	60 e0       	ldi	r22, 0x00	; 0
 ada:	2a f0       	brmi	.+10     	; 0xae6 <__floatsisf+0x6c>
 adc:	9a 95       	dec	r25
 ade:	66 0f       	add	r22, r22
 ae0:	77 1f       	adc	r23, r23
 ae2:	88 1f       	adc	r24, r24
 ae4:	da f7       	brpl	.-10     	; 0xadc <__floatsisf+0x62>
 ae6:	88 0f       	add	r24, r24
 ae8:	96 95       	lsr	r25
 aea:	87 95       	ror	r24
 aec:	97 f9       	bld	r25, 7
 aee:	08 95       	ret

00000af0 <__fp_inf>:
 af0:	97 f9       	bld	r25, 7
 af2:	9f 67       	ori	r25, 0x7F	; 127
 af4:	80 e8       	ldi	r24, 0x80	; 128
 af6:	70 e0       	ldi	r23, 0x00	; 0
 af8:	60 e0       	ldi	r22, 0x00	; 0
 afa:	08 95       	ret

00000afc <__fp_nan>:
 afc:	9f ef       	ldi	r25, 0xFF	; 255
 afe:	80 ec       	ldi	r24, 0xC0	; 192
 b00:	08 95       	ret

00000b02 <__fp_pscA>:
 b02:	00 24       	eor	r0, r0
 b04:	0a 94       	dec	r0
 b06:	16 16       	cp	r1, r22
 b08:	17 06       	cpc	r1, r23
 b0a:	18 06       	cpc	r1, r24
 b0c:	09 06       	cpc	r0, r25
 b0e:	08 95       	ret

00000b10 <__fp_pscB>:
 b10:	00 24       	eor	r0, r0
 b12:	0a 94       	dec	r0
 b14:	12 16       	cp	r1, r18
 b16:	13 06       	cpc	r1, r19
 b18:	14 06       	cpc	r1, r20
 b1a:	05 06       	cpc	r0, r21
 b1c:	08 95       	ret

00000b1e <__fp_round>:
 b1e:	09 2e       	mov	r0, r25
 b20:	03 94       	inc	r0
 b22:	00 0c       	add	r0, r0
 b24:	11 f4       	brne	.+4      	; 0xb2a <__fp_round+0xc>
 b26:	88 23       	and	r24, r24
 b28:	52 f0       	brmi	.+20     	; 0xb3e <__fp_round+0x20>
 b2a:	bb 0f       	add	r27, r27
 b2c:	40 f4       	brcc	.+16     	; 0xb3e <__fp_round+0x20>
 b2e:	bf 2b       	or	r27, r31
 b30:	11 f4       	brne	.+4      	; 0xb36 <__fp_round+0x18>
 b32:	60 ff       	sbrs	r22, 0
 b34:	04 c0       	rjmp	.+8      	; 0xb3e <__fp_round+0x20>
 b36:	6f 5f       	subi	r22, 0xFF	; 255
 b38:	7f 4f       	sbci	r23, 0xFF	; 255
 b3a:	8f 4f       	sbci	r24, 0xFF	; 255
 b3c:	9f 4f       	sbci	r25, 0xFF	; 255
 b3e:	08 95       	ret

00000b40 <__fp_split3>:
 b40:	57 fd       	sbrc	r21, 7
 b42:	90 58       	subi	r25, 0x80	; 128
 b44:	44 0f       	add	r20, r20
 b46:	55 1f       	adc	r21, r21
 b48:	59 f0       	breq	.+22     	; 0xb60 <__fp_splitA+0x10>
 b4a:	5f 3f       	cpi	r21, 0xFF	; 255
 b4c:	71 f0       	breq	.+28     	; 0xb6a <__fp_splitA+0x1a>
 b4e:	47 95       	ror	r20

00000b50 <__fp_splitA>:
 b50:	88 0f       	add	r24, r24
 b52:	97 fb       	bst	r25, 7
 b54:	99 1f       	adc	r25, r25
 b56:	61 f0       	breq	.+24     	; 0xb70 <__fp_splitA+0x20>
 b58:	9f 3f       	cpi	r25, 0xFF	; 255
 b5a:	79 f0       	breq	.+30     	; 0xb7a <__fp_splitA+0x2a>
 b5c:	87 95       	ror	r24
 b5e:	08 95       	ret
 b60:	12 16       	cp	r1, r18
 b62:	13 06       	cpc	r1, r19
 b64:	14 06       	cpc	r1, r20
 b66:	55 1f       	adc	r21, r21
 b68:	f2 cf       	rjmp	.-28     	; 0xb4e <__fp_split3+0xe>
 b6a:	46 95       	lsr	r20
 b6c:	f1 df       	rcall	.-30     	; 0xb50 <__fp_splitA>
 b6e:	08 c0       	rjmp	.+16     	; 0xb80 <__fp_splitA+0x30>
 b70:	16 16       	cp	r1, r22
 b72:	17 06       	cpc	r1, r23
 b74:	18 06       	cpc	r1, r24
 b76:	99 1f       	adc	r25, r25
 b78:	f1 cf       	rjmp	.-30     	; 0xb5c <__fp_splitA+0xc>
 b7a:	86 95       	lsr	r24
 b7c:	71 05       	cpc	r23, r1
 b7e:	61 05       	cpc	r22, r1
 b80:	08 94       	sec
 b82:	08 95       	ret

00000b84 <__fp_zero>:
 b84:	e8 94       	clt

00000b86 <__fp_szero>:
 b86:	bb 27       	eor	r27, r27
 b88:	66 27       	eor	r22, r22
 b8a:	77 27       	eor	r23, r23
 b8c:	cb 01       	movw	r24, r22
 b8e:	97 f9       	bld	r25, 7
 b90:	08 95       	ret

00000b92 <__mulsf3>:
 b92:	0b d0       	rcall	.+22     	; 0xbaa <__mulsf3x>
 b94:	c4 cf       	rjmp	.-120    	; 0xb1e <__fp_round>
 b96:	b5 df       	rcall	.-150    	; 0xb02 <__fp_pscA>
 b98:	28 f0       	brcs	.+10     	; 0xba4 <__mulsf3+0x12>
 b9a:	ba df       	rcall	.-140    	; 0xb10 <__fp_pscB>
 b9c:	18 f0       	brcs	.+6      	; 0xba4 <__mulsf3+0x12>
 b9e:	95 23       	and	r25, r21
 ba0:	09 f0       	breq	.+2      	; 0xba4 <__mulsf3+0x12>
 ba2:	a6 cf       	rjmp	.-180    	; 0xaf0 <__fp_inf>
 ba4:	ab cf       	rjmp	.-170    	; 0xafc <__fp_nan>
 ba6:	11 24       	eor	r1, r1
 ba8:	ee cf       	rjmp	.-36     	; 0xb86 <__fp_szero>

00000baa <__mulsf3x>:
 baa:	ca df       	rcall	.-108    	; 0xb40 <__fp_split3>
 bac:	a0 f3       	brcs	.-24     	; 0xb96 <__mulsf3+0x4>

00000bae <__mulsf3_pse>:
 bae:	95 9f       	mul	r25, r21
 bb0:	d1 f3       	breq	.-12     	; 0xba6 <__mulsf3+0x14>
 bb2:	95 0f       	add	r25, r21
 bb4:	50 e0       	ldi	r21, 0x00	; 0
 bb6:	55 1f       	adc	r21, r21
 bb8:	62 9f       	mul	r22, r18
 bba:	f0 01       	movw	r30, r0
 bbc:	72 9f       	mul	r23, r18
 bbe:	bb 27       	eor	r27, r27
 bc0:	f0 0d       	add	r31, r0
 bc2:	b1 1d       	adc	r27, r1
 bc4:	63 9f       	mul	r22, r19
 bc6:	aa 27       	eor	r26, r26
 bc8:	f0 0d       	add	r31, r0
 bca:	b1 1d       	adc	r27, r1
 bcc:	aa 1f       	adc	r26, r26
 bce:	64 9f       	mul	r22, r20
 bd0:	66 27       	eor	r22, r22
 bd2:	b0 0d       	add	r27, r0
 bd4:	a1 1d       	adc	r26, r1
 bd6:	66 1f       	adc	r22, r22
 bd8:	82 9f       	mul	r24, r18
 bda:	22 27       	eor	r18, r18
 bdc:	b0 0d       	add	r27, r0
 bde:	a1 1d       	adc	r26, r1
 be0:	62 1f       	adc	r22, r18
 be2:	73 9f       	mul	r23, r19
 be4:	b0 0d       	add	r27, r0
 be6:	a1 1d       	adc	r26, r1
 be8:	62 1f       	adc	r22, r18
 bea:	83 9f       	mul	r24, r19
 bec:	a0 0d       	add	r26, r0
 bee:	61 1d       	adc	r22, r1
 bf0:	22 1f       	adc	r18, r18
 bf2:	74 9f       	mul	r23, r20
 bf4:	33 27       	eor	r19, r19
 bf6:	a0 0d       	add	r26, r0
 bf8:	61 1d       	adc	r22, r1
 bfa:	23 1f       	adc	r18, r19
 bfc:	84 9f       	mul	r24, r20
 bfe:	60 0d       	add	r22, r0
 c00:	21 1d       	adc	r18, r1
 c02:	82 2f       	mov	r24, r18
 c04:	76 2f       	mov	r23, r22
 c06:	6a 2f       	mov	r22, r26
 c08:	11 24       	eor	r1, r1
 c0a:	9f 57       	subi	r25, 0x7F	; 127
 c0c:	50 40       	sbci	r21, 0x00	; 0
 c0e:	8a f0       	brmi	.+34     	; 0xc32 <__mulsf3_pse+0x84>
 c10:	e1 f0       	breq	.+56     	; 0xc4a <__mulsf3_pse+0x9c>
 c12:	88 23       	and	r24, r24
 c14:	4a f0       	brmi	.+18     	; 0xc28 <__mulsf3_pse+0x7a>
 c16:	ee 0f       	add	r30, r30
 c18:	ff 1f       	adc	r31, r31
 c1a:	bb 1f       	adc	r27, r27
 c1c:	66 1f       	adc	r22, r22
 c1e:	77 1f       	adc	r23, r23
 c20:	88 1f       	adc	r24, r24
 c22:	91 50       	subi	r25, 0x01	; 1
 c24:	50 40       	sbci	r21, 0x00	; 0
 c26:	a9 f7       	brne	.-22     	; 0xc12 <__mulsf3_pse+0x64>
 c28:	9e 3f       	cpi	r25, 0xFE	; 254
 c2a:	51 05       	cpc	r21, r1
 c2c:	70 f0       	brcs	.+28     	; 0xc4a <__mulsf3_pse+0x9c>
 c2e:	60 cf       	rjmp	.-320    	; 0xaf0 <__fp_inf>
 c30:	aa cf       	rjmp	.-172    	; 0xb86 <__fp_szero>
 c32:	5f 3f       	cpi	r21, 0xFF	; 255
 c34:	ec f3       	brlt	.-6      	; 0xc30 <__mulsf3_pse+0x82>
 c36:	98 3e       	cpi	r25, 0xE8	; 232
 c38:	dc f3       	brlt	.-10     	; 0xc30 <__mulsf3_pse+0x82>
 c3a:	86 95       	lsr	r24
 c3c:	77 95       	ror	r23
 c3e:	67 95       	ror	r22
 c40:	b7 95       	ror	r27
 c42:	f7 95       	ror	r31
 c44:	e7 95       	ror	r30
 c46:	9f 5f       	subi	r25, 0xFF	; 255
 c48:	c1 f7       	brne	.-16     	; 0xc3a <__mulsf3_pse+0x8c>
 c4a:	fe 2b       	or	r31, r30
 c4c:	88 0f       	add	r24, r24
 c4e:	91 1d       	adc	r25, r1
 c50:	96 95       	lsr	r25
 c52:	87 95       	ror	r24
 c54:	97 f9       	bld	r25, 7
 c56:	08 95       	ret

00000c58 <pow>:
 c58:	fa 01       	movw	r30, r20
 c5a:	ee 0f       	add	r30, r30
 c5c:	ff 1f       	adc	r31, r31
 c5e:	30 96       	adiw	r30, 0x00	; 0
 c60:	21 05       	cpc	r18, r1
 c62:	31 05       	cpc	r19, r1
 c64:	99 f1       	breq	.+102    	; 0xccc <pow+0x74>
 c66:	61 15       	cp	r22, r1
 c68:	71 05       	cpc	r23, r1
 c6a:	61 f4       	brne	.+24     	; 0xc84 <pow+0x2c>
 c6c:	80 38       	cpi	r24, 0x80	; 128
 c6e:	bf e3       	ldi	r27, 0x3F	; 63
 c70:	9b 07       	cpc	r25, r27
 c72:	49 f1       	breq	.+82     	; 0xcc6 <pow+0x6e>
 c74:	68 94       	set
 c76:	90 38       	cpi	r25, 0x80	; 128
 c78:	81 05       	cpc	r24, r1
 c7a:	61 f0       	breq	.+24     	; 0xc94 <pow+0x3c>
 c7c:	80 38       	cpi	r24, 0x80	; 128
 c7e:	bf ef       	ldi	r27, 0xFF	; 255
 c80:	9b 07       	cpc	r25, r27
 c82:	41 f0       	breq	.+16     	; 0xc94 <pow+0x3c>
 c84:	99 23       	and	r25, r25
 c86:	42 f5       	brpl	.+80     	; 0xcd8 <pow+0x80>
 c88:	ff 3f       	cpi	r31, 0xFF	; 255
 c8a:	e1 05       	cpc	r30, r1
 c8c:	31 05       	cpc	r19, r1
 c8e:	21 05       	cpc	r18, r1
 c90:	11 f1       	breq	.+68     	; 0xcd6 <pow+0x7e>
 c92:	e8 94       	clt
 c94:	08 94       	sec
 c96:	e7 95       	ror	r30
 c98:	d9 01       	movw	r26, r18
 c9a:	aa 23       	and	r26, r26
 c9c:	29 f4       	brne	.+10     	; 0xca8 <pow+0x50>
 c9e:	ab 2f       	mov	r26, r27
 ca0:	be 2f       	mov	r27, r30
 ca2:	f8 5f       	subi	r31, 0xF8	; 248
 ca4:	d0 f3       	brcs	.-12     	; 0xc9a <pow+0x42>
 ca6:	10 c0       	rjmp	.+32     	; 0xcc8 <pow+0x70>
 ca8:	ff 5f       	subi	r31, 0xFF	; 255
 caa:	70 f4       	brcc	.+28     	; 0xcc8 <pow+0x70>
 cac:	a6 95       	lsr	r26
 cae:	e0 f7       	brcc	.-8      	; 0xca8 <pow+0x50>
 cb0:	f7 39       	cpi	r31, 0x97	; 151
 cb2:	50 f0       	brcs	.+20     	; 0xcc8 <pow+0x70>
 cb4:	19 f0       	breq	.+6      	; 0xcbc <pow+0x64>
 cb6:	ff 3a       	cpi	r31, 0xAF	; 175
 cb8:	38 f4       	brcc	.+14     	; 0xcc8 <pow+0x70>
 cba:	9f 77       	andi	r25, 0x7F	; 127
 cbc:	9f 93       	push	r25
 cbe:	0c d0       	rcall	.+24     	; 0xcd8 <pow+0x80>
 cc0:	0f 90       	pop	r0
 cc2:	07 fc       	sbrc	r0, 7
 cc4:	90 58       	subi	r25, 0x80	; 128
 cc6:	08 95       	ret
 cc8:	3e f0       	brts	.+14     	; 0xcd8 <pow+0x80>
 cca:	18 cf       	rjmp	.-464    	; 0xafc <__fp_nan>
 ccc:	60 e0       	ldi	r22, 0x00	; 0
 cce:	70 e0       	ldi	r23, 0x00	; 0
 cd0:	80 e8       	ldi	r24, 0x80	; 128
 cd2:	9f e3       	ldi	r25, 0x3F	; 63
 cd4:	08 95       	ret
 cd6:	4f e7       	ldi	r20, 0x7F	; 127
 cd8:	9f 77       	andi	r25, 0x7F	; 127
 cda:	5f 93       	push	r21
 cdc:	4f 93       	push	r20
 cde:	3f 93       	push	r19
 ce0:	2f 93       	push	r18
 ce2:	9e d0       	rcall	.+316    	; 0xe20 <log>
 ce4:	2f 91       	pop	r18
 ce6:	3f 91       	pop	r19
 ce8:	4f 91       	pop	r20
 cea:	5f 91       	pop	r21
 cec:	52 df       	rcall	.-348    	; 0xb92 <__mulsf3>
 cee:	05 c0       	rjmp	.+10     	; 0xcfa <exp>
 cf0:	19 f4       	brne	.+6      	; 0xcf8 <pow+0xa0>
 cf2:	0e f0       	brts	.+2      	; 0xcf6 <pow+0x9e>
 cf4:	fd ce       	rjmp	.-518    	; 0xaf0 <__fp_inf>
 cf6:	46 cf       	rjmp	.-372    	; 0xb84 <__fp_zero>
 cf8:	01 cf       	rjmp	.-510    	; 0xafc <__fp_nan>

00000cfa <exp>:
 cfa:	2a df       	rcall	.-428    	; 0xb50 <__fp_splitA>
 cfc:	c8 f3       	brcs	.-14     	; 0xcf0 <pow+0x98>
 cfe:	96 38       	cpi	r25, 0x86	; 134
 d00:	c0 f7       	brcc	.-16     	; 0xcf2 <pow+0x9a>
 d02:	07 f8       	bld	r0, 7
 d04:	0f 92       	push	r0
 d06:	e8 94       	clt
 d08:	2b e3       	ldi	r18, 0x3B	; 59
 d0a:	3a ea       	ldi	r19, 0xAA	; 170
 d0c:	48 eb       	ldi	r20, 0xB8	; 184
 d0e:	5f e7       	ldi	r21, 0x7F	; 127
 d10:	4e df       	rcall	.-356    	; 0xbae <__mulsf3_pse>
 d12:	0f 92       	push	r0
 d14:	0f 92       	push	r0
 d16:	0f 92       	push	r0
 d18:	4d b7       	in	r20, 0x3d	; 61
 d1a:	5e b7       	in	r21, 0x3e	; 62
 d1c:	0f 92       	push	r0
 d1e:	c0 d0       	rcall	.+384    	; 0xea0 <modf>
 d20:	e6 e8       	ldi	r30, 0x86	; 134
 d22:	f1 e0       	ldi	r31, 0x01	; 1
 d24:	16 d0       	rcall	.+44     	; 0xd52 <__fp_powser>
 d26:	4f 91       	pop	r20
 d28:	5f 91       	pop	r21
 d2a:	ef 91       	pop	r30
 d2c:	ff 91       	pop	r31
 d2e:	e5 95       	asr	r30
 d30:	ee 1f       	adc	r30, r30
 d32:	ff 1f       	adc	r31, r31
 d34:	49 f0       	breq	.+18     	; 0xd48 <exp+0x4e>
 d36:	fe 57       	subi	r31, 0x7E	; 126
 d38:	e0 68       	ori	r30, 0x80	; 128
 d3a:	44 27       	eor	r20, r20
 d3c:	ee 0f       	add	r30, r30
 d3e:	44 1f       	adc	r20, r20
 d40:	fa 95       	dec	r31
 d42:	e1 f7       	brne	.-8      	; 0xd3c <exp+0x42>
 d44:	41 95       	neg	r20
 d46:	55 0b       	sbc	r21, r21
 d48:	32 d0       	rcall	.+100    	; 0xdae <ldexp>
 d4a:	0f 90       	pop	r0
 d4c:	07 fe       	sbrs	r0, 7
 d4e:	26 c0       	rjmp	.+76     	; 0xd9c <inverse>
 d50:	08 95       	ret

00000d52 <__fp_powser>:
 d52:	df 93       	push	r29
 d54:	cf 93       	push	r28
 d56:	1f 93       	push	r17
 d58:	0f 93       	push	r16
 d5a:	ff 92       	push	r15
 d5c:	ef 92       	push	r14
 d5e:	df 92       	push	r13
 d60:	7b 01       	movw	r14, r22
 d62:	8c 01       	movw	r16, r24
 d64:	68 94       	set
 d66:	05 c0       	rjmp	.+10     	; 0xd72 <__fp_powser+0x20>
 d68:	da 2e       	mov	r13, r26
 d6a:	ef 01       	movw	r28, r30
 d6c:	1e df       	rcall	.-452    	; 0xbaa <__mulsf3x>
 d6e:	fe 01       	movw	r30, r28
 d70:	e8 94       	clt
 d72:	a5 91       	lpm	r26, Z+
 d74:	25 91       	lpm	r18, Z+
 d76:	35 91       	lpm	r19, Z+
 d78:	45 91       	lpm	r20, Z+
 d7a:	55 91       	lpm	r21, Z+
 d7c:	ae f3       	brts	.-22     	; 0xd68 <__fp_powser+0x16>
 d7e:	ef 01       	movw	r28, r30
 d80:	d4 d0       	rcall	.+424    	; 0xf2a <__addsf3x>
 d82:	fe 01       	movw	r30, r28
 d84:	97 01       	movw	r18, r14
 d86:	a8 01       	movw	r20, r16
 d88:	da 94       	dec	r13
 d8a:	79 f7       	brne	.-34     	; 0xd6a <__fp_powser+0x18>
 d8c:	df 90       	pop	r13
 d8e:	ef 90       	pop	r14
 d90:	ff 90       	pop	r15
 d92:	0f 91       	pop	r16
 d94:	1f 91       	pop	r17
 d96:	cf 91       	pop	r28
 d98:	df 91       	pop	r29
 d9a:	08 95       	ret

00000d9c <inverse>:
 d9c:	9b 01       	movw	r18, r22
 d9e:	ac 01       	movw	r20, r24
 da0:	60 e0       	ldi	r22, 0x00	; 0
 da2:	70 e0       	ldi	r23, 0x00	; 0
 da4:	80 e8       	ldi	r24, 0x80	; 128
 da6:	9f e3       	ldi	r25, 0x3F	; 63
 da8:	cd cd       	rjmp	.-1126   	; 0x944 <__divsf3>
 daa:	a2 ce       	rjmp	.-700    	; 0xaf0 <__fp_inf>
 dac:	11 c1       	rjmp	.+546    	; 0xfd0 <__fp_mpack>

00000dae <ldexp>:
 dae:	d0 de       	rcall	.-608    	; 0xb50 <__fp_splitA>
 db0:	e8 f3       	brcs	.-6      	; 0xdac <inverse+0x10>
 db2:	99 23       	and	r25, r25
 db4:	d9 f3       	breq	.-10     	; 0xdac <inverse+0x10>
 db6:	94 0f       	add	r25, r20
 db8:	51 1d       	adc	r21, r1
 dba:	bb f3       	brvs	.-18     	; 0xdaa <inverse+0xe>
 dbc:	91 50       	subi	r25, 0x01	; 1
 dbe:	50 40       	sbci	r21, 0x00	; 0
 dc0:	94 f0       	brlt	.+36     	; 0xde6 <ldexp+0x38>
 dc2:	59 f0       	breq	.+22     	; 0xdda <ldexp+0x2c>
 dc4:	88 23       	and	r24, r24
 dc6:	32 f0       	brmi	.+12     	; 0xdd4 <ldexp+0x26>
 dc8:	66 0f       	add	r22, r22
 dca:	77 1f       	adc	r23, r23
 dcc:	88 1f       	adc	r24, r24
 dce:	91 50       	subi	r25, 0x01	; 1
 dd0:	50 40       	sbci	r21, 0x00	; 0
 dd2:	c1 f7       	brne	.-16     	; 0xdc4 <ldexp+0x16>
 dd4:	9e 3f       	cpi	r25, 0xFE	; 254
 dd6:	51 05       	cpc	r21, r1
 dd8:	44 f7       	brge	.-48     	; 0xdaa <inverse+0xe>
 dda:	88 0f       	add	r24, r24
 ddc:	91 1d       	adc	r25, r1
 dde:	96 95       	lsr	r25
 de0:	87 95       	ror	r24
 de2:	97 f9       	bld	r25, 7
 de4:	08 95       	ret
 de6:	5f 3f       	cpi	r21, 0xFF	; 255
 de8:	ac f0       	brlt	.+42     	; 0xe14 <ldexp+0x66>
 dea:	98 3e       	cpi	r25, 0xE8	; 232
 dec:	9c f0       	brlt	.+38     	; 0xe14 <ldexp+0x66>
 dee:	bb 27       	eor	r27, r27
 df0:	86 95       	lsr	r24
 df2:	77 95       	ror	r23
 df4:	67 95       	ror	r22
 df6:	b7 95       	ror	r27
 df8:	08 f4       	brcc	.+2      	; 0xdfc <ldexp+0x4e>
 dfa:	b1 60       	ori	r27, 0x01	; 1
 dfc:	93 95       	inc	r25
 dfe:	c1 f7       	brne	.-16     	; 0xdf0 <ldexp+0x42>
 e00:	bb 0f       	add	r27, r27
 e02:	58 f7       	brcc	.-42     	; 0xdda <ldexp+0x2c>
 e04:	11 f4       	brne	.+4      	; 0xe0a <ldexp+0x5c>
 e06:	60 ff       	sbrs	r22, 0
 e08:	e8 cf       	rjmp	.-48     	; 0xdda <ldexp+0x2c>
 e0a:	6f 5f       	subi	r22, 0xFF	; 255
 e0c:	7f 4f       	sbci	r23, 0xFF	; 255
 e0e:	8f 4f       	sbci	r24, 0xFF	; 255
 e10:	9f 4f       	sbci	r25, 0xFF	; 255
 e12:	e3 cf       	rjmp	.-58     	; 0xdda <ldexp+0x2c>
 e14:	b8 ce       	rjmp	.-656    	; 0xb86 <__fp_szero>
 e16:	0e f0       	brts	.+2      	; 0xe1a <ldexp+0x6c>
 e18:	db c0       	rjmp	.+438    	; 0xfd0 <__fp_mpack>
 e1a:	70 ce       	rjmp	.-800    	; 0xafc <__fp_nan>
 e1c:	68 94       	set
 e1e:	68 ce       	rjmp	.-816    	; 0xaf0 <__fp_inf>

00000e20 <log>:
 e20:	97 de       	rcall	.-722    	; 0xb50 <__fp_splitA>
 e22:	c8 f3       	brcs	.-14     	; 0xe16 <ldexp+0x68>
 e24:	99 23       	and	r25, r25
 e26:	d1 f3       	breq	.-12     	; 0xe1c <ldexp+0x6e>
 e28:	c6 f3       	brts	.-16     	; 0xe1a <ldexp+0x6c>
 e2a:	df 93       	push	r29
 e2c:	cf 93       	push	r28
 e2e:	1f 93       	push	r17
 e30:	0f 93       	push	r16
 e32:	ff 92       	push	r15
 e34:	c9 2f       	mov	r28, r25
 e36:	dd 27       	eor	r29, r29
 e38:	88 23       	and	r24, r24
 e3a:	2a f0       	brmi	.+10     	; 0xe46 <log+0x26>
 e3c:	21 97       	sbiw	r28, 0x01	; 1
 e3e:	66 0f       	add	r22, r22
 e40:	77 1f       	adc	r23, r23
 e42:	88 1f       	adc	r24, r24
 e44:	da f7       	brpl	.-10     	; 0xe3c <log+0x1c>
 e46:	20 e0       	ldi	r18, 0x00	; 0
 e48:	30 e0       	ldi	r19, 0x00	; 0
 e4a:	40 e8       	ldi	r20, 0x80	; 128
 e4c:	5f eb       	ldi	r21, 0xBF	; 191
 e4e:	9f e3       	ldi	r25, 0x3F	; 63
 e50:	88 39       	cpi	r24, 0x98	; 152
 e52:	20 f0       	brcs	.+8      	; 0xe5c <log+0x3c>
 e54:	80 3e       	cpi	r24, 0xE0	; 224
 e56:	30 f0       	brcs	.+12     	; 0xe64 <log+0x44>
 e58:	21 96       	adiw	r28, 0x01	; 1
 e5a:	8f 77       	andi	r24, 0x7F	; 127
 e5c:	55 d0       	rcall	.+170    	; 0xf08 <__addsf3>
 e5e:	ee ea       	ldi	r30, 0xAE	; 174
 e60:	f1 e0       	ldi	r31, 0x01	; 1
 e62:	03 c0       	rjmp	.+6      	; 0xe6a <log+0x4a>
 e64:	51 d0       	rcall	.+162    	; 0xf08 <__addsf3>
 e66:	eb ed       	ldi	r30, 0xDB	; 219
 e68:	f1 e0       	ldi	r31, 0x01	; 1
 e6a:	73 df       	rcall	.-282    	; 0xd52 <__fp_powser>
 e6c:	8b 01       	movw	r16, r22
 e6e:	be 01       	movw	r22, r28
 e70:	ec 01       	movw	r28, r24
 e72:	fb 2e       	mov	r15, r27
 e74:	6f 57       	subi	r22, 0x7F	; 127
 e76:	71 09       	sbc	r23, r1
 e78:	75 95       	asr	r23
 e7a:	77 1f       	adc	r23, r23
 e7c:	88 0b       	sbc	r24, r24
 e7e:	99 0b       	sbc	r25, r25
 e80:	fc dd       	rcall	.-1032   	; 0xa7a <__floatsisf>
 e82:	28 e1       	ldi	r18, 0x18	; 24
 e84:	32 e7       	ldi	r19, 0x72	; 114
 e86:	41 e3       	ldi	r20, 0x31	; 49
 e88:	5f e3       	ldi	r21, 0x3F	; 63
 e8a:	8f de       	rcall	.-738    	; 0xbaa <__mulsf3x>
 e8c:	af 2d       	mov	r26, r15
 e8e:	98 01       	movw	r18, r16
 e90:	ae 01       	movw	r20, r28
 e92:	ff 90       	pop	r15
 e94:	0f 91       	pop	r16
 e96:	1f 91       	pop	r17
 e98:	cf 91       	pop	r28
 e9a:	df 91       	pop	r29
 e9c:	46 d0       	rcall	.+140    	; 0xf2a <__addsf3x>
 e9e:	3f ce       	rjmp	.-898    	; 0xb1e <__fp_round>

00000ea0 <modf>:
 ea0:	fa 01       	movw	r30, r20
 ea2:	dc 01       	movw	r26, r24
 ea4:	aa 0f       	add	r26, r26
 ea6:	bb 1f       	adc	r27, r27
 ea8:	9b 01       	movw	r18, r22
 eaa:	ac 01       	movw	r20, r24
 eac:	bf 57       	subi	r27, 0x7F	; 127
 eae:	28 f4       	brcc	.+10     	; 0xeba <modf+0x1a>
 eb0:	22 27       	eor	r18, r18
 eb2:	33 27       	eor	r19, r19
 eb4:	44 27       	eor	r20, r20
 eb6:	50 78       	andi	r21, 0x80	; 128
 eb8:	1f c0       	rjmp	.+62     	; 0xef8 <modf+0x58>
 eba:	b7 51       	subi	r27, 0x17	; 23
 ebc:	88 f4       	brcc	.+34     	; 0xee0 <modf+0x40>
 ebe:	ab 2f       	mov	r26, r27
 ec0:	00 24       	eor	r0, r0
 ec2:	46 95       	lsr	r20
 ec4:	37 95       	ror	r19
 ec6:	27 95       	ror	r18
 ec8:	01 1c       	adc	r0, r1
 eca:	a3 95       	inc	r26
 ecc:	d2 f3       	brmi	.-12     	; 0xec2 <modf+0x22>
 ece:	00 20       	and	r0, r0
 ed0:	69 f0       	breq	.+26     	; 0xeec <modf+0x4c>
 ed2:	22 0f       	add	r18, r18
 ed4:	33 1f       	adc	r19, r19
 ed6:	44 1f       	adc	r20, r20
 ed8:	b3 95       	inc	r27
 eda:	da f3       	brmi	.-10     	; 0xed2 <modf+0x32>
 edc:	0d d0       	rcall	.+26     	; 0xef8 <modf+0x58>
 ede:	13 c0       	rjmp	.+38     	; 0xf06 <__subsf3>
 ee0:	61 30       	cpi	r22, 0x01	; 1
 ee2:	71 05       	cpc	r23, r1
 ee4:	a0 e8       	ldi	r26, 0x80	; 128
 ee6:	8a 07       	cpc	r24, r26
 ee8:	b9 46       	sbci	r27, 0x69	; 105
 eea:	30 f4       	brcc	.+12     	; 0xef8 <modf+0x58>
 eec:	9b 01       	movw	r18, r22
 eee:	ac 01       	movw	r20, r24
 ef0:	66 27       	eor	r22, r22
 ef2:	77 27       	eor	r23, r23
 ef4:	88 27       	eor	r24, r24
 ef6:	90 78       	andi	r25, 0x80	; 128
 ef8:	30 96       	adiw	r30, 0x00	; 0
 efa:	21 f0       	breq	.+8      	; 0xf04 <modf+0x64>
 efc:	20 83       	st	Z, r18
 efe:	31 83       	std	Z+1, r19	; 0x01
 f00:	42 83       	std	Z+2, r20	; 0x02
 f02:	53 83       	std	Z+3, r21	; 0x03
 f04:	08 95       	ret

00000f06 <__subsf3>:
 f06:	50 58       	subi	r21, 0x80	; 128

00000f08 <__addsf3>:
 f08:	bb 27       	eor	r27, r27
 f0a:	aa 27       	eor	r26, r26
 f0c:	0e d0       	rcall	.+28     	; 0xf2a <__addsf3x>
 f0e:	07 ce       	rjmp	.-1010   	; 0xb1e <__fp_round>
 f10:	f8 dd       	rcall	.-1040   	; 0xb02 <__fp_pscA>
 f12:	30 f0       	brcs	.+12     	; 0xf20 <__addsf3+0x18>
 f14:	fd dd       	rcall	.-1030   	; 0xb10 <__fp_pscB>
 f16:	20 f0       	brcs	.+8      	; 0xf20 <__addsf3+0x18>
 f18:	31 f4       	brne	.+12     	; 0xf26 <__addsf3+0x1e>
 f1a:	9f 3f       	cpi	r25, 0xFF	; 255
 f1c:	11 f4       	brne	.+4      	; 0xf22 <__addsf3+0x1a>
 f1e:	1e f4       	brtc	.+6      	; 0xf26 <__addsf3+0x1e>
 f20:	ed cd       	rjmp	.-1062   	; 0xafc <__fp_nan>
 f22:	0e f4       	brtc	.+2      	; 0xf26 <__addsf3+0x1e>
 f24:	e0 95       	com	r30
 f26:	e7 fb       	bst	r30, 7
 f28:	e3 cd       	rjmp	.-1082   	; 0xaf0 <__fp_inf>

00000f2a <__addsf3x>:
 f2a:	e9 2f       	mov	r30, r25
 f2c:	09 de       	rcall	.-1006   	; 0xb40 <__fp_split3>
 f2e:	80 f3       	brcs	.-32     	; 0xf10 <__addsf3+0x8>
 f30:	ba 17       	cp	r27, r26
 f32:	62 07       	cpc	r22, r18
 f34:	73 07       	cpc	r23, r19
 f36:	84 07       	cpc	r24, r20
 f38:	95 07       	cpc	r25, r21
 f3a:	18 f0       	brcs	.+6      	; 0xf42 <__addsf3x+0x18>
 f3c:	71 f4       	brne	.+28     	; 0xf5a <__addsf3x+0x30>
 f3e:	9e f5       	brtc	.+102    	; 0xfa6 <__addsf3x+0x7c>
 f40:	21 ce       	rjmp	.-958    	; 0xb84 <__fp_zero>
 f42:	0e f4       	brtc	.+2      	; 0xf46 <__addsf3x+0x1c>
 f44:	e0 95       	com	r30
 f46:	0b 2e       	mov	r0, r27
 f48:	ba 2f       	mov	r27, r26
 f4a:	a0 2d       	mov	r26, r0
 f4c:	0b 01       	movw	r0, r22
 f4e:	b9 01       	movw	r22, r18
 f50:	90 01       	movw	r18, r0
 f52:	0c 01       	movw	r0, r24
 f54:	ca 01       	movw	r24, r20
 f56:	a0 01       	movw	r20, r0
 f58:	11 24       	eor	r1, r1
 f5a:	ff 27       	eor	r31, r31
 f5c:	59 1b       	sub	r21, r25
 f5e:	99 f0       	breq	.+38     	; 0xf86 <__addsf3x+0x5c>
 f60:	59 3f       	cpi	r21, 0xF9	; 249
 f62:	50 f4       	brcc	.+20     	; 0xf78 <__addsf3x+0x4e>
 f64:	50 3e       	cpi	r21, 0xE0	; 224
 f66:	68 f1       	brcs	.+90     	; 0xfc2 <__addsf3x+0x98>
 f68:	1a 16       	cp	r1, r26
 f6a:	f0 40       	sbci	r31, 0x00	; 0
 f6c:	a2 2f       	mov	r26, r18
 f6e:	23 2f       	mov	r18, r19
 f70:	34 2f       	mov	r19, r20
 f72:	44 27       	eor	r20, r20
 f74:	58 5f       	subi	r21, 0xF8	; 248
 f76:	f3 cf       	rjmp	.-26     	; 0xf5e <__addsf3x+0x34>
 f78:	46 95       	lsr	r20
 f7a:	37 95       	ror	r19
 f7c:	27 95       	ror	r18
 f7e:	a7 95       	ror	r26
 f80:	f0 40       	sbci	r31, 0x00	; 0
 f82:	53 95       	inc	r21
 f84:	c9 f7       	brne	.-14     	; 0xf78 <__addsf3x+0x4e>
 f86:	7e f4       	brtc	.+30     	; 0xfa6 <__addsf3x+0x7c>
 f88:	1f 16       	cp	r1, r31
 f8a:	ba 0b       	sbc	r27, r26
 f8c:	62 0b       	sbc	r22, r18
 f8e:	73 0b       	sbc	r23, r19
 f90:	84 0b       	sbc	r24, r20
 f92:	ba f0       	brmi	.+46     	; 0xfc2 <__addsf3x+0x98>
 f94:	91 50       	subi	r25, 0x01	; 1
 f96:	a1 f0       	breq	.+40     	; 0xfc0 <__addsf3x+0x96>
 f98:	ff 0f       	add	r31, r31
 f9a:	bb 1f       	adc	r27, r27
 f9c:	66 1f       	adc	r22, r22
 f9e:	77 1f       	adc	r23, r23
 fa0:	88 1f       	adc	r24, r24
 fa2:	c2 f7       	brpl	.-16     	; 0xf94 <__addsf3x+0x6a>
 fa4:	0e c0       	rjmp	.+28     	; 0xfc2 <__addsf3x+0x98>
 fa6:	ba 0f       	add	r27, r26
 fa8:	62 1f       	adc	r22, r18
 faa:	73 1f       	adc	r23, r19
 fac:	84 1f       	adc	r24, r20
 fae:	48 f4       	brcc	.+18     	; 0xfc2 <__addsf3x+0x98>
 fb0:	87 95       	ror	r24
 fb2:	77 95       	ror	r23
 fb4:	67 95       	ror	r22
 fb6:	b7 95       	ror	r27
 fb8:	f7 95       	ror	r31
 fba:	9e 3f       	cpi	r25, 0xFE	; 254
 fbc:	08 f0       	brcs	.+2      	; 0xfc0 <__addsf3x+0x96>
 fbe:	b3 cf       	rjmp	.-154    	; 0xf26 <__addsf3+0x1e>
 fc0:	93 95       	inc	r25
 fc2:	88 0f       	add	r24, r24
 fc4:	08 f0       	brcs	.+2      	; 0xfc8 <__addsf3x+0x9e>
 fc6:	99 27       	eor	r25, r25
 fc8:	ee 0f       	add	r30, r30
 fca:	97 95       	ror	r25
 fcc:	87 95       	ror	r24
 fce:	08 95       	ret

00000fd0 <__fp_mpack>:
 fd0:	9f 3f       	cpi	r25, 0xFF	; 255
 fd2:	31 f0       	breq	.+12     	; 0xfe0 <__fp_mpack_finite+0xc>

00000fd4 <__fp_mpack_finite>:
 fd4:	91 50       	subi	r25, 0x01	; 1
 fd6:	20 f4       	brcc	.+8      	; 0xfe0 <__fp_mpack_finite+0xc>
 fd8:	87 95       	ror	r24
 fda:	77 95       	ror	r23
 fdc:	67 95       	ror	r22
 fde:	b7 95       	ror	r27
 fe0:	88 0f       	add	r24, r24
 fe2:	91 1d       	adc	r25, r1
 fe4:	96 95       	lsr	r25
 fe6:	87 95       	ror	r24
 fe8:	97 f9       	bld	r25, 7
 fea:	08 95       	ret

00000fec <_exit>:
 fec:	f8 94       	cli

00000fee <__stop_program>:
 fee:	ff cf       	rjmp	.-2      	; 0xfee <__stop_program>
